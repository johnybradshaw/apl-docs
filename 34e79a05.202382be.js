(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{188:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,f=u["".concat(i,".").concat(d)]||u[d]||b[d]||o;return n?a.a.createElement(f,s(s({ref:t},p),{},{components:n})):a.a.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(7),o=(n(0),n(188)),i={slug:"apps/gatekeeper",title:"Working with Gatekeeper Operator",sidebar_label:"Gatekeeper"},s={unversionedId:"app-gatekeeper",id:"app-gatekeeper",isDocsHomePage:!1,title:"Working with Gatekeeper Operator",description:"Otomi uses Gatekeeper for policy enforcement. Gatekeeper can be turned on or off. When turned on, individual policies can be switched on or off. Please see the OPA Gatekeeper policy library as it is the source for the policy baseline here. We made a selection of usable policies for Otomi and adapted them to be used by Conftest as well for static analysis of manifests generated by Otomi.",source:"@site/docs/app-gatekeeper.md",slug:"/apps/gatekeeper",permalink:"/docs/apps/gatekeeper",editUrl:"https://github.com/redkubes/redkubes.github.io/tree/master/docs/app-gatekeeper.md",version:"current",sidebar_label:"Gatekeeper",sidebar:"mainSidebar",previous:{title:"Working with Hashicorp Vault",permalink:"/docs/apps/vault"},next:{title:"Installing and using Otomi CLI",permalink:"/docs/cli/"}},c=[{value:"Enable Gatekeeper",id:"enable-gatekeeper",children:[]},{value:"Using annotations",id:"using-annotations",children:[]},{value:"BYO policies",id:"byo-policies",children:[]}],p={toc:c};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Otomi uses Gatekeeper for policy enforcement. Gatekeeper can be turned on or off. When turned on, individual policies can be switched on or off. Please see the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/open-policy-agent/gatekeeper-library"}),"OPA Gatekeeper policy library")," as it is the source for the policy baseline here. We made a selection of usable policies for Otomi and adapted them to be used by Conftest as well for static analysis of manifests generated by Otomi."),Object(o.b)("p",null,"The policies are provided as a best-practice security baseline. The full set of all policies can be found ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/redkubes/otomi-core/tree/master/policies"}),"here"),"."),Object(o.b)("p",null,"Customization of the policies is supported based on the Otomi ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/redkubes/otomi-core/blob/master/values-schema.yaml"}),"schema")," (or use Otomi Console). In case of specific requirements, admins can add their own custom policies."),Object(o.b)("p",null,"IMPORTANT NOTES:"),Object(o.b)("p",null,"It is possible to deviate from the baseline, provided there is a substantiated reason for doing so. To deviate from the baseline, annotations for the pod spec can be configured. Gatekeeper always keeps a log and thus it is traceable when an annotation is used. The use of annotations is a specific Otomi feature."),Object(o.b)("h3",{id:"enable-gatekeeper"},"Enable Gatekeeper"),Object(o.b)("p",null,"If not enabled during install, you can enable Gatekeeper Operator by editing the ",Object(o.b)("inlineCode",{parentName:"p"},"values/env/charts/gatekeeper-operator.yaml")," file and set enabled to true:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-yaml"}),"charts:\n  gatekeeper-operator:\n    enabled: true\n")),Object(o.b)("h3",{id:"using-annotations"},"Using annotations"),Object(o.b)("h3",{id:"byo-policies"},"BYO policies"))}l.isMDXComponent=!0}}]);