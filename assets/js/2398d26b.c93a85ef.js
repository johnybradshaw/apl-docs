(self.webpackChunkotomi_docs=self.webpackChunkotomi_docs||[]).push([[4344],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return m},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),p=c(a),d=r,h=p["".concat(s,".").concat(d)]||p[d]||u[d]||l;return a?n.createElement(h,i(i({ref:t},m),{},{components:a})):n.createElement(h,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2470:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),i=["components"],o={slug:"ce/secrets",title:"Configuring Secrets in CE mode",sidebar_label:"Secrets"},s={unversionedId:"ce-configure-secrets",id:"ce-configure-secrets",isDocsHomePage:!1,title:"Configuring Secrets in CE mode",description:"When you are running Otomi in CE mode or doing local development, you will operate on values directly and have to commit them manually. Before you can start creating Secrets, you first need to create a Team. Follow these steps to create a Secret in Otomi CE:",source:"@site/docs/ce-configure-secrets.md",sourceDirName:".",slug:"/ce/secrets",permalink:"/docs/ce/secrets",editUrl:"https://github.com/redkubes/redkubes/tree/master/docs/ce-configure-secrets.md",version:"current",sidebar_label:"Secrets",frontMatter:{slug:"ce/secrets",title:"Configuring Secrets in CE mode",sidebar_label:"Secrets"},sidebar:"mainSidebar",previous:{title:"Configuring Services in CE mode",permalink:"/docs/ce/services"},next:{title:"EE Overview",permalink:"/docs/ee/"}},c=[{value:"Create generic secrets",id:"create-generic-secrets",children:[{value:"1. Create a secret in Vault",id:"1-create-a-secret-in-vault",children:[]},{value:"2. Create a generic secret in Otomi",id:"2-create-a-generic-secret-in-otomi",children:[]}]},{value:"Create a (Kubernetes) pull secret",id:"create-a-kubernetes-pull-secret",children:[{value:"1. Create a Kubernetes docker-registry secret",id:"1-create-a-kubernetes-docker-registry-secret",children:[]},{value:"2. Create a secret in Vault",id:"2-create-a-secret-in-vault",children:[]},{value:"3. Create a Docker registry secret in Otomi",id:"3-create-a-docker-registry-secret-in-otomi",children:[]}]},{value:"Create TLS secrets",id:"create-tls-secrets",children:[{value:"1. Create a secret in Vault",id:"1-create-a-secret-in-vault-1",children:[]},{value:"2. Create a TLS secret in Otomi",id:"2-create-a-tls-secret-in-otomi",children:[]}]}],m={toc:c};function u(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"When you are running Otomi in CE mode or doing local development, you will operate on values directly and have to commit them manually. Before you can start creating Secrets, you first need to create a Team. Follow these steps to create a Secret in Otomi CE:"),(0,l.kt)("h2",{id:"create-generic-secrets"},"Create generic secrets"),(0,l.kt)("h3",{id:"1-create-a-secret-in-vault"},"1. Create a secret in Vault"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Login in to Otomi Console as a team-admin or team-member"),(0,l.kt)("li",{parentName:"ul"},"If you are a member of multiple teams, select the team in the top bar"),(0,l.kt)("li",{parentName:"ul"},"Under the Team section (right menu bar), click 'Otomi Apps'"),(0,l.kt)("li",{parentName:"ul"},"Now open Hashicorp Vault"),(0,l.kt)("li",{parentName:"ul"},"To login, select 'OIDC' and then click 'login'"),(0,l.kt)("li",{parentName:"ul"},"Click 'Create secret'"),(0,l.kt)("li",{parentName:"ul"},"Provide a name (path = `teams/team-name/secret-name)"),(0,l.kt)("li",{parentName:"ul"},"Add the key / value pairs"),(0,l.kt)("li",{parentName:"ul"},"Click 'Save'")),(0,l.kt)("h3",{id:"2-create-a-generic-secret-in-otomi"},"2. Create a generic secret in Otomi"),(0,l.kt)("p",null,"Add the secret created in Vault to the ",(0,l.kt)("inlineCode",{parentName:"p"},"values/env/teams/external-secrets.<team-name>.yaml"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    demo:\n      secrets:\n        - name: otomi-welcome # the name of the secret in Vault\n          teamId: demo # teh name of the team\n          type: generic # the secret type, in this case generic\n          entries:\n            - HELLO # the key of the secret in Vault\n")),(0,l.kt)("h4",{id:"validate-changes-optional"},"validate changes (optional)"),(0,l.kt)("p",null,"When using Otomi CLI, you can validate the changes in the values based on the Otomi values schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"otomi validate-values\n")),(0,l.kt)("p",null,"Use -v to get more output"),(0,l.kt)("p",null,"When successful, the output will show: ",(0,l.kt)("inlineCode",{parentName:"p"},"otomi:validate-values:verbose Values validation SUCCESSFUL")),(0,l.kt)("h4",{id:"apply-changes"},"Apply changes"),(0,l.kt)("p",null,"Commit and push the changes using Otomi CLI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"otomi apply\n")),(0,l.kt)("p",null,"And then (optionally) commit and push the changes to git:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'otomi commit -m "your commit comment" --no-verify\n')),(0,l.kt)("p",null,"The secret is now available to be used in Otomi ",(0,l.kt)("a",{parentName:"p",href:"/docs/ce/services"},"Services")),(0,l.kt)("h2",{id:"create-a-kubernetes-pull-secret"},"Create a (Kubernetes) pull secret"),(0,l.kt)("h3",{id:"1-create-a-kubernetes-docker-registry-secret"},"1. Create a Kubernetes docker-registry secret"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'email="not@us.ed" # can be something else if the registry provider expects it, but usually this is ignored\nserver="" # example: "https://harbor.demo.eks.otomi.cloud/"\nusername="" # your username\npassword="" # your password, can be token\nkubectl create secret docker-registry --dry-run=client regcred --docker-email=$email --docker-server=$server --docker-username=$username --docker-password=$password -ojsonpath=\'{.data.\\.dockerconfigjson}\' | base64 --decode\n')),(0,l.kt)("h3",{id:"2-create-a-secret-in-vault"},"2. Create a secret in Vault"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Login in to Otomi Console as a team-admin or team-member"),(0,l.kt)("li",{parentName:"ul"},"If you are a member of multiple teams, select the team in the top bar"),(0,l.kt)("li",{parentName:"ul"},"Under the Team section (right menu bar), click 'Otomi Apps'"),(0,l.kt)("li",{parentName:"ul"},"Now open Hashicorp Vault"),(0,l.kt)("li",{parentName:"ul"},"To login, select 'OIDC' and then click 'login'"),(0,l.kt)("li",{parentName:"ul"},"Click 'Create secret'"),(0,l.kt)("li",{parentName:"ul"},"Select '",(0,l.kt)("strong",{parentName:"li"},"JSON"),"'"),(0,l.kt)("li",{parentName:"ul"},"Provide a name (path = `teams/team-name/secret-name)"),(0,l.kt)("li",{parentName:"ul"},"Add the JSON created in step 1"),(0,l.kt)("li",{parentName:"ul"},"Click 'Save'")),(0,l.kt)("h3",{id:"3-create-a-docker-registry-secret-in-otomi"},"3. Create a Docker registry secret in Otomi"),(0,l.kt)("p",null,"Add the secret created in Vault to the ",(0,l.kt)("inlineCode",{parentName:"p"},"values/env/teams/external-secrets.<team-name>.yaml"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    demo:\n      secrets:\n        - name: test-pull-secret # the name of the secret in Vault\n          teamId: demo # the name of the team\n          type: docker-registry # the secret type, a docker registry secret\n")),(0,l.kt)("h4",{id:"validate-changes-optional-1"},"validate changes (optional)"),(0,l.kt)("p",null,"When using Otomi CLI, you can validate the changes in the values based on the Otomi values schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"otomi validate-values\n")),(0,l.kt)("p",null,"Use -v to get more output"),(0,l.kt)("p",null,"When successful, the output will show: ",(0,l.kt)("inlineCode",{parentName:"p"},"otomi:validate-values:verbose Values validation SUCCESSFUL")),(0,l.kt)("h4",{id:"apply-changes-1"},"Apply changes"),(0,l.kt)("p",null,"Commit and push the changes using Otomi CLI:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"otomi apply\n")),(0,l.kt)("p",null,"And then (optionally) commit and push the changes to git:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'otomi commit -m "your commit comment" --no-verify\n')),(0,l.kt)("p",null,"The pull secret can now be used by the team to pull images. Note: Otomi automatically creates a pull secret in the team namespace to enable pulling images from the local Harbor registry (also automatically created for the team)."),(0,l.kt)("h2",{id:"create-tls-secrets"},"Create TLS secrets"),(0,l.kt)("h3",{id:"1-create-a-secret-in-vault-1"},"1. Create a secret in Vault"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Login in to Otomi Console as a team-admin or team-member"),(0,l.kt)("li",{parentName:"ul"},"If you are a member of multiple teams, select the team in the top bar"),(0,l.kt)("li",{parentName:"ul"},"Under the Team section (right menu bar), click 'Otomi Apps'"),(0,l.kt)("li",{parentName:"ul"},"Now open Hashicorp Vault"),(0,l.kt)("li",{parentName:"ul"},"To login, select 'OIDC' and then click 'login'"),(0,l.kt)("li",{parentName:"ul"},"Click 'Create secret'"),(0,l.kt)("li",{parentName:"ul"},"Provide a name (path = `teams/team-name/secret-name)"),(0,l.kt)("li",{parentName:"ul"},"Add 3 Keys: ",(0,l.kt)("inlineCode",{parentName:"li"},"key"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"crt")," and ",(0,l.kt)("inlineCode",{parentName:"li"},"ca")," and add the certificate content as a value. The ",(0,l.kt)("inlineCode",{parentName:"li"},"ca")," field is optional and can be used to provide the certificate authority (for mTLS)"),(0,l.kt)("li",{parentName:"ul"},"Click 'Save'")),(0,l.kt)("h3",{id:"2-create-a-tls-secret-in-otomi"},"2. Create a TLS secret in Otomi"),(0,l.kt)("p",null,"Add the secret created in Vault to the ",(0,l.kt)("inlineCode",{parentName:"p"},"values/env/teams/external-secrets.<team-name>.yaml"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    demo:\n      secrets:\n        - name: tls-test # the name of the secret in Vault\n          teamId: demo # the name of the team\n          type: tls # the type of the secret, a TLS secret in this case\n          ca: ca.crt # optional\n          crt: tls.crt # property corresponding to the key of the secret in Vault\n          key: tls.key # property corresponding to the key of the secret in Vault\n")),(0,l.kt)("h4",{id:"validate-changes-optional-2"},"validate changes (optional)"),(0,l.kt)("p",null,"When using Otomi CLI, you can validate the changes in the values based on the Otomi values schema:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"otomi validate-values\n")),(0,l.kt)("p",null,"Use -v to get more output."),(0,l.kt)("p",null,"When successful, the output will show: ",(0,l.kt)("inlineCode",{parentName:"p"},"otomi:validate-values:verbose Values validation SUCCESSFUL")),(0,l.kt)("h4",{id:"deploy-changes"},"Deploy changes"),(0,l.kt)("p",null,"Apply the changes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"otomi apply\n")),(0,l.kt)("p",null,"The secret is now available to be used in Otomi ",(0,l.kt)("a",{parentName:"p",href:"/docs/ce/services"},"Services")))}u.isMDXComponent=!0}}]);