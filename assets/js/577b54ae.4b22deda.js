"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[1673],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,v=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2848:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={slug:"tutorials/create-k8s-service",title:"Create a Kubernetes service",sidebar_label:"Create a K8s service"},l=void 0,c={unversionedId:"tutorial-4-create-svc",id:"tutorial-4-create-svc",title:"Create a Kubernetes service",description:"When Otomi is installed with minimal values, a CA is automatically generated and added to the worker nodes. When using Azure AKS version 1.19 and up, the CA can not be automatically added to the worker nodes and pulling images from a Harbor registry is not possible. See this known issue for more information.",source:"@site/docs/tutorial-4-create-svc.md",sourceDirName:".",slug:"/tutorials/create-k8s-service",permalink:"/docs/tutorials/create-k8s-service",editUrl:"https://github.com/redkubes/redkubes.github.io/tree/master/docs/tutorial-4-create-svc.md",tags:[],version:"current",frontMatter:{slug:"tutorials/create-k8s-service",title:"Create a Kubernetes service",sidebar_label:"Create a K8s service"},sidebar:"mainSidebar",previous:{title:"Push an image to harbor",permalink:"/docs/tutorials/build-tag-push"},next:{title:"Create a Knative service",permalink:"/docs/tutorials/create-knative-service"}},p={},u=[{value:"Create a Deployment and Service",id:"create-a-deployment-and-service",level:3},{value:"Deploy the deployment and service",id:"deploy-the-deployment-and-service",level:3}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"When Otomi is installed with minimal values, a CA is automatically generated and added to the worker nodes. When using Azure AKS version 1.19 and up, the CA can not be automatically added to the worker nodes and pulling images from a Harbor registry is not possible. See ",(0,o.kt)("a",{parentName:"p",href:"/docs/sre/known-issues/custom-ca"},"this")," known issue for more information."))),(0,o.kt)("p",null,"In this tutorial, we are going to deploy the image we pushed to harbor in the previous tutorial, by creating a Kubernetes Deployment and Service."),(0,o.kt)("h3",{id:"create-a-deployment-and-service"},"Create a Deployment and Service"),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-svc.yaml")," file and copy/paste the following 2 Kubernetes manifests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-svc\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-svc\n  template:\n    metadata:\n      annotations:\n        policy.otomi.io/ignore-sidecar: container-limits,psp-allowed-users\n      labels:\n        app: hello-svc\n    spec:\n      containers:\n        - name: hello-svc\n          image: harbor.your-domain.com/team-demo/hello-world:latest\n          resources:\n            limits:\n              memory: '128Mi'\n              cpu: '200m'\n            requests:\n              memory: '64Mi'\n              cpu: '100m'\n          securityContext:\n            runAsUser: 1001\n          ports:\n            - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-svc\nspec:\n  selector:\n    app: hello-svc\n  ports:\n    - port: 80\n      targetPort: 8080\n")),(0,o.kt)("h3",{id:"deploy-the-deployment-and-service"},"Deploy the deployment and service"),(0,o.kt)("p",null,"In Otomi console, select team ",(0,o.kt)("inlineCode",{parentName:"p"},"demo")," in the top bar. On the bottom of the left panel, click on ",(0,o.kt)("inlineCode",{parentName:"p"},"download KUBECFG"),"."),(0,o.kt)("p",null,"Now export the KUBECFG to set the kubectl context:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export KUBECONFIG=$path-to-your-kubeconfig.yaml\n")),(0,o.kt)("p",null,"And apply the manifest to Kubernetes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f hello-svc.yaml\n")),(0,o.kt)("p",null,"Check to see if the pod is running and the service has been created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pod\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl describe svc hello\n")))}m.isMDXComponent=!0}}]);