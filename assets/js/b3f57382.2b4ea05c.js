"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[3846],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),d=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=d(a),u=n,b=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return a?r.createElement(b,s(s({ref:t},c),{},{components:a})):r.createElement(b,s({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5693:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const o={slug:"lab-25",title:"Monitor PostgreSQL databases",sidebar_label:"Monitor databases"},s=void 0,i={unversionedId:"for-devs/get-started/lab-25",id:"for-devs/get-started/lab-25",title:"Monitor PostgreSQL databases",description:"If you previously created a database, you'll noticed that we did not let the operator create a PodMonitor. The reason of this, is that the PodMonitor requires specific lables to be picked-up by the team's own Prometheus. In this lab we'll create a custom PodMonitor and create a dashboard in the team's own Grafana.",source:"@site/docs/for-devs/get-started/lab-25.md",sourceDirName:"for-devs/get-started",slug:"/for-devs/get-started/lab-25",permalink:"/docs/for-devs/get-started/lab-25",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/get-started/lab-25.md",tags:[],version:"current",frontMatter:{slug:"lab-25",title:"Monitor PostgreSQL databases",sidebar_label:"Monitor databases"},sidebar:"mainSidebar",previous:{title:"Monitor services",permalink:"/docs/for-devs/get-started/lab-23"},next:{title:"Alertmanager",permalink:"/docs/apps/alertmanager"}},l={},d=[{value:"Create a PodMonitor",id:"create-a-podmonitor",level:2},{value:"Add a custom dashboard to the team&#39;s Grafana",id:"add-a-custom-dashboard-to-the-teams-grafana",level:2}],c={toc:d};function p(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"If you previously created a database, you'll noticed that we did not let the operator create a PodMonitor. The reason of this, is that the PodMonitor requires specific lables to be picked-up by the team's own Prometheus. In this lab we'll create a custom PodMonitor and create a dashboard in the team's own Grafana."),(0,n.kt)("h2",{id:"create-a-podmonitor"},"Create a PodMonitor"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"In the apps section in Otomi console, click on Gitea. In the list of repo's you'll now see a new repo called ",(0,n.kt)("inlineCode",{parentName:"p"},"otomi/team-<name>-argocd"),".")),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},"Create a new file called ",(0,n.kt)("inlineCode",{parentName:"p"},"my-db-pod-monitor.yaml")))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: monitoring.coreos.com/v1\nkind: PodMonitor\nmetadata:\n  name: my-db-pm\n  labels:\n    cnpg.io/cluster: my-db\n    prometheus: team-demo\nspec:\n  namespaceSelector:\n    matchNames:\n      - team-demo\n  podMetricsEndpoints:\n    - port: metrics\n  selector:\n    matchLabels:\n      cnpg.io/cluster: my-db\n")),(0,n.kt)("ol",{start:2},(0,n.kt)("li",{parentName:"ol"},"Save the file and commit the changes.")),(0,n.kt)("p",null,"The pod monitor will be picked-up by the team's own Prometheus. You can now add a dashboard to the team's Grafana instance."),(0,n.kt)("h2",{id:"add-a-custom-dashboard-to-the-teams-grafana"},"Add a custom dashboard to the team's Grafana"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Create a new file called ",(0,n.kt)("inlineCode",{parentName:"li"},"my-db-dashboard.yaml"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-db-cluster-dashboard\n  labels:\n    grafana_dashboard: "1"\n    release: grafana-dashboards-demo\ndata:\n  cnp.json: |-\n    # your dashboard json\n')))}p.isMDXComponent=!0}}]);