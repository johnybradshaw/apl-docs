(self.webpackChunkotomi_docs=self.webpackChunkotomi_docs||[]).push([[209],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},679:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(2122),o=n(9756),r=(n(7294),n(3905)),i=["components"],l={slug:"development",title:"Development",sidebar_label:"Development"},s={unversionedId:"development",id:"development",isDocsHomePage:!1,title:"Development",description:"1. Editing source files",source:"@site/community/development.md",sourceDirName:".",slug:"/development",permalink:"/community/development",editUrl:"https://github.com/redkubes/redkubes/edit/master/community/development.md",version:"current",lastUpdatedBy:"srodenhuis",lastUpdatedAt:1626339180,formattedLastUpdatedAt:"7/15/2021",sidebar_label:"Development",frontMatter:{slug:"development",title:"Development",sidebar_label:"Development"},sidebar:"community",previous:{title:"Contributor Covenant Code of Conduct",permalink:"/community/code-of-conduct"}},c=[{value:"1. Editing source files",id:"1-editing-source-files",children:[]},{value:"2. Validating changes",id:"2-validating-changes",children:[{value:"Input",id:"input",children:[]},{value:"Output",id:"output",children:[]}]},{value:"3. Diffing changes",id:"3-diffing-changes",children:[]},{value:"4. Deploying changes",id:"4-deploying-changes",children:[]}],p={toc:c};function u(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"1-editing-source-files"},"1. Editing source files"),(0,r.kt)("p",null,"Most of the code is in go templates: helmfile's ",(0,r.kt)("inlineCode",{parentName:"p"},"*.gotmpl")," and helm chart's ",(0,r.kt)("inlineCode",{parentName:"p"},"templates/*.yaml"),". Please become familiar with it's intricacies by reading our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redkubes/otomi-core/docs/GO_TEMPLATING.md"},"special section on go templating"),"."),(0,r.kt)("p",null,"For editing the ",(0,r.kt)("inlineCode",{parentName:"p"},"values-schema.yaml")," please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redkubes/otomi-core/docs/meta-schema-validation.md"},"meta-schema documentation"),"."),(0,r.kt)("p",null,"For working with ",(0,r.kt)("inlineCode",{parentName:"p"},"bats")," and adding tests to ",(0,r.kt)("inlineCode",{parentName:"p"},"bin/tests/*")," please refer to the ",(0,r.kt)("a",{parentName:"p",href:"https://bats-core.readthedocs.io/en/latest/"},"online bats documentation")),(0,r.kt)("p",null,"You can define OPA policies in ",(0,r.kt)("inlineCode",{parentName:"p"},"policies/*/src.rego")," and unit tests in ",(0,r.kt)("inlineCode",{parentName:"p"},"policies/*/src_test.rego")," files that are used both for statical analysis (also at build time), as well as by ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/open-policy-agent/gatekeeper"},"gatekeeper")," (at run time) to check whether manifests are conformant. Please read ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redkubes/otomi-core/docs/policies.md"},"more about our setup in the docs"),"."),(0,r.kt)("h2",{id:"2-validating-changes"},"2. Validating changes"),(0,r.kt)("p",null,"For the next steps you will need to export ",(0,r.kt)("inlineCode",{parentName:"p"},"ENV_DIR")," to point to your values folder, and source the aliases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# assuming you created otomi-values repo next to this:\nexport ENV_DIR=$PWD/../otomi-values\n. bin/aliases\n")),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("p",null,"Start by validating the configuration values against the ",(0,r.kt)("inlineCode",{parentName:"p"},"values-schema.yaml")," with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# all clusters\notomi validate-values\n# For the next step you will also need to export`CLOUD` and `CLUSTER`, as it is only validating a configured target cluster:\notomi validate-values: 1\n")),(0,r.kt)("p",null,"Any changes made to the meta-schema will then also be automatically validated."),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("p",null,"You can check whether resulting manifests are conform our specs with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# all clusters\notomi validate-templates\n# For the next step you will also need to export`CLOUD` and `CLUSTER`, as it is only validating a configured target cluster:\nexport CLOUD=google CLUSTER=demo\notomi validate-templates 1\n")),(0,r.kt)("p",null,"This will check whether any CRs are matching their CRDs, but also check for k8s manifest best practices using ",(0,r.kt)("a",{parentName:"p",href:"https://www.kubeval.com"},"kubeval"),"."),(0,r.kt)("p",null,"And to run the policy checks run the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# all clusters\notomi check-policies\n# For the next step you will also need to export`CLOUD` and `CLUSTER`, as it is only validating a configured target cluster:\notomi check-policies 1\n")),(0,r.kt)("h2",{id:"3-diffing-changes"},"3. Diffing changes"),(0,r.kt)("p",null,"To test changes in code against running clusters you will need to export at least ",(0,r.kt)("inlineCode",{parentName:"p"},"ENV_DIR"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"CLOUD")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"CLUSTER")," and source the aliases:"),(0,r.kt)("p",null,"After changing code you can do a diff to see everything still works and what has changed in the output manifests:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"otomi diff\n# or target one release:\notomi diff -l name=prometheus-operator\n")),(0,r.kt)("h2",{id:"4-deploying-changes"},"4. Deploying changes"),(0,r.kt)("p",null,"It is preferred that deployment is done from the values repo, as it is tied to the clusters listed there only, and thus has a smaller blast radius. When you feel that you are in control and want fast iteration you can connect to a values repo directly by exporting ",(0,r.kt)("inlineCode",{parentName:"p"},"ENV_DIR"),". It is mandatory and won't work without it. The CLI will also check that you are targeting ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl"),"'s ",(0,r.kt)("inlineCode",{parentName:"p"},"current-context")," as a failsafe mechanism."),(0,r.kt)("p",null,"To deploy everything in the stack:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# target your cluster\nexport CLOUD=google && CLUSTER=demo\n# and deploy\notomi deploy\n")),(0,r.kt)("p",null,"NOTICE: when on GKE this may sometimes result in an access token refresh error as the full path to the ",(0,r.kt)("inlineCode",{parentName:"p"},"gcloud")," binary is referenced from GKE's token refresh mechanism in ",(0,r.kt)("inlineCode",{parentName:"p"},".kube/config"),", which is mounted from the host, but inaccessible from within the container. (See bug report: ",(0,r.kt)("a",{parentName:"p",href:"https://issuetracker.google.com/issues/171493249"},"https://issuetracker.google.com/issues/171493249"),"). Retrying the command usuall works, so do that to work around it for now."),(0,r.kt)("p",null,"It is also possible to target individual helmfile releases from the stack:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"otomi apply -l name=prometheus-operator\n")),(0,r.kt)("p",null,"This will first do a ",(0,r.kt)("inlineCode",{parentName:"p"},"diff")," and then a ",(0,r.kt)("inlineCode",{parentName:"p"},"sync"),". But if you expect the helm bookkeeping to not match the current state (because resources were manipulated without helm), then do a sync:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"otomi sync -l name=prometheus-operator\n")))}u.isMDXComponent=!0}}]);