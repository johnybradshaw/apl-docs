(self.webpackChunkotomi_docs=self.webpackChunkotomi_docs||[]).push([[4708],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,v=m["".concat(l,".").concat(d)]||m[d]||u[d]||a;return n?i.createElement(v,o(o({ref:t},p),{},{components:n})):i.createElement(v,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},405:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var i=n(2122),r=n(9756),a=(n(7294),n(3905)),o=["components"],s={slug:"ce/services",title:"Configuring Services in CE mode",sidebar_label:"Services"},l={unversionedId:"ce-configure-services",id:"ce-configure-services",isDocsHomePage:!1,title:"Configuring Services in CE mode",description:"When you are running Otomi in CE mode, you will operate on the values directly and have to commit them manually. This page describes how to create a Service, and how to edit a Service when running in CE mode. Before you can create a Service, make sure a Team is created first.",source:"@site/docs/ce-configure-services.md",sourceDirName:".",slug:"/ce/services",permalink:"/docs/ce/services",editUrl:"https://github.com/redkubes/redkubes/tree/master/docs/ce-configure-services.md",version:"current",sidebar_label:"Services",frontMatter:{slug:"ce/services",title:"Configuring Services in CE mode",sidebar_label:"Services"},sidebar:"mainSidebar",previous:{title:"Configuring Teams in CE mode",permalink:"/docs/ce/teams"},next:{title:"Configuring Secrets in CE mode",permalink:"/docs/ce/secrets"}},c=[{value:"Existing Kubernetes Service",id:"existing-kubernetes-service",children:[]},{value:"Existing Knative service",id:"existing-knative-service",children:[]},{value:"New Knative Service",id:"new-knative-service",children:[{value:"validate changes (optional)",id:"validate-changes-optional",children:[]},{value:"Deploy changes",id:"deploy-changes",children:[]}]},{value:"Automation",id:"automation",children:[]},{value:"More examples",id:"more-examples",children:[{value:"New Knative service with public exposure",id:"new-knative-service-with-public-exposure",children:[]},{value:"New Knative service with TLS passthrough",id:"new-knative-service-with-tls-passthrough",children:[]}]}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When you are running Otomi in CE mode, you will operate on the values directly and have to commit them manually. This page describes how to create a Service, and how to edit a Service when running in CE mode. Before you can create a Service, make sure a ",(0,a.kt)("a",{parentName:"p",href:"/docs/ce/teams"},"Team")," is created first."),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"/about/architecture#services"},"Service")," in Otomi is a feature for easy deployment of container workloads using Knative Serving and exposing (existing/pre-deployed) Kubernetes and Knative services with a public URL."),(0,a.kt)("p",null,"3 types of Services are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#existing-kubernetes-service"},"1. Existing Kubernetes Service")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#existing-knative-service"},"2. Existing Knative service")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#new-knative-service"},"3. New Knative Service"))),(0,a.kt)("p",null,"3 types of exposure are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cluster: has no internet exposure, and is only accessible in the cluster"),(0,a.kt)("li",{parentName:"ul"},"Private: only accessible via the cluster's private network loadbalancer"),(0,a.kt)("li",{parentName:"ul"},"Public: publicly accessible via the cluster's public network loadbalancer")),(0,a.kt)("p",null,"The examples below focus on the 3 types of services. All of these 3 services will be configured with public exposure. Fot more infomation about all the supported exposure configuration values, see the Otomi ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/redkubes/otomi-core/blob/master/values-schema.yaml"},"values-schema")," or use the Visual Studio plugin (automatically added when using the ",(0,a.kt)("inlineCode",{parentName:"p"},"otomi bootstrap")," CLI command)"),(0,a.kt)("h2",{id:"existing-kubernetes-service"},"Existing Kubernetes Service"),(0,a.kt)("p",null,"To create a Service for an existing (pre-deployed) Kubernetes service, open the ",(0,a.kt)("inlineCode",{parentName:"p"},"services.<team-name>.yaml")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"/env/teams/"),"."),(0,a.kt)("p",null,"The next code example creates a Service in the team demo for the pre-deployed Kubernetes service with the name ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," and make it public:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    otomi:\n      services:\n        - name: hello # the name of the pre deployed service\n          port: 80 # the port of the pre deployed service\n          type: public\n")),(0,a.kt)("h2",{id:"existing-knative-service"},"Existing Knative service"),(0,a.kt)("p",null,"To create a Service for an existing (pre-deployed) Knative service, open the ",(0,a.kt)("inlineCode",{parentName:"p"},"services.<team-name>.yaml")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"/env/teams/"),"."),(0,a.kt)("p",null,"The next code example creates a Service in the team demo for the pre-deployed Knative service with the name ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," and make it public:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    otomi:\n      services:\n        - name: hello # the name of the pre deployed service\n          port: 80 # the port of the pre deployed service\n          ksvc: # service type\n            preDeployed: true # set to true to use a pre deployed knative service\n          type: public\n")),(0,a.kt)("h2",{id:"new-knative-service"},"New Knative Service"),(0,a.kt)("p",null,"To create a new Knative service, open the ",(0,a.kt)("inlineCode",{parentName:"p"},"services.<team-name>.yaml")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"/env/teams/"),"."),(0,a.kt)("p",null,"The next code example creates a new Knative service in the team demo to deploy a ",(0,a.kt)("inlineCode",{parentName:"p"},"nginx:stable")," image and make it public:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    demo: # name of the team\n      services:\n        - name: test # name of the service\n          port: 80 # the port the service\n          ksvc: # service type\n            image: # provide the image for a new knative service\n              repository: nginx\n              tag: stable\n            scaleToZero: false # scale to zero true/false\n            resources:\n              limits:\n                cpu: 50m\n                memory: 64Mi\n              requests:\n                cpu: 50m\n                memory: 64Mi\n            containerPort: 80 # the container port\n          type: public #exposure\n")),(0,a.kt)("h3",{id:"validate-changes-optional"},"validate changes (optional)"),(0,a.kt)("p",null,"Use Otomi CLI to validate the changes in the values based on the Otomi values schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"otomi validate-values -v\n")),(0,a.kt)("p",null,"When successful, the output will show: ",(0,a.kt)("inlineCode",{parentName:"p"},"otomi:validate-values:verbose Values validation SUCCESSFUL")),(0,a.kt)("h3",{id:"deploy-changes"},"Deploy changes"),(0,a.kt)("p",null,"Apply the changes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"otomi apply\n")),(0,a.kt)("h2",{id:"automation"},"Automation"),(0,a.kt)("p",null,"When you create a Service, a lot is happening (and automatically done for you) behind the scenes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Istio Virtual services are automatically generated for team services, tying a generic ingress architecture to service endpoints in a predictable way"),(0,a.kt)("li",{parentName:"ul"},"Mutual TLS is automatically started between workloads that are part of the mesh"),(0,a.kt)("li",{parentName:"ul"},"When creating a new Knative service, the Knative service manifest is created and deployed")),(0,a.kt)("h2",{id:"more-examples"},"More examples"),(0,a.kt)("p",null,"The following examples show the configuration of 2 services:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A new knative service using the ",(0,a.kt)("inlineCode",{parentName:"li"},"otomi/nodejs-helloworld")," image with public exposure"),(0,a.kt)("li",{parentName:"ul"},"A new knative service using the ",(0,a.kt)("inlineCode",{parentName:"li"},"nginx:latest")," image with TLS passthrough")),(0,a.kt)("h3",{id:"new-knative-service-with-public-exposure"},"New Knative service with public exposure"),(0,a.kt)("p",null,"The following service uses a generic secret that is mounted to the pod as an environment variable and exposes the service public based on the default host-name convention ",(0,a.kt)("inlineCode",{parentName:"p"},"<service-name.<team-name>.yourdomain.com>"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    demo:\n      services:\n        - name: hello\n          port: 80\n          ownHost: true\n          ksvc:\n            image:\n              repository: otomi/nodejs-helloworld\n              tag: v1.2.12\n            scaleToZero: false\n            resources:\n              limits:\n                cpu: 50m\n                memory: 64Mi\n              requests:\n                cpu: 50m\n                memory: 64Mi\n            secrets:\n              - mysecret-generic\n          type: public\n")),(0,a.kt)("h3",{id:"new-knative-service-with-tls-passthrough"},"New Knative service with TLS passthrough"),(0,a.kt)("p",null,"The following service uses a TLS secret that is mounted in the container at the specified folder path. This service is configured with TLS passthough, meaning the TLS traffic is terminated by the pod and not by the ingress controller (with is done if exposure is set to Public). The service is exposed based on a custom hostname ",(0,a.kt)("inlineCode",{parentName:"p"},"tlspass.eks.dev.otomi.cloud"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'teamConfig:\n  teams:\n    demo:\n      services:\n        - name: my-nginx\n          port: 443\n          domain: tlspass.eks.dev.otomi.cloud\n          ksvc:\n            image:\n              repository: nginx\n              tag: latest\n            scaleToZero: false\n            resources:\n              limits:\n                cpu: 50m\n                memory: 64Mi\n              requests:\n                cpu: 50m\n                memory: 64Mi\n            files:\n              /etc/nginx.conf: |\n                events {\n                }\n                http {\n                  log_format main \'$remote_addr - $remote_user [$time_local]  $status \'\n                  \'"$request" $body_bytes_sent "$http_referer" \'\n                  \'"$http_user_agent" "$http_x_forwarded_for"\';\n                  access_log /var/log/nginx/access.log main;\n                  error_log  /var/log/nginx/error.log;\n                  server {\n                    listen 443 ssl;\n                    root /usr/share/nginx/html;\n                    index index.html;\n                    server_name nginx.example.com;\n                    ssl_certificate /etc/nginx-server-certs/tls.crt;\n                    ssl_certificate_key /etc/nginx-server-certs/tls.key;\n                  }\n                }\n            secretMounts:\n              /etc/nginx-server-certs: mysecret-tls\n          type: tlsPass\n')))}u.isMDXComponent=!0}}]);