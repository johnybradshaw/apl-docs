"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[1696],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>b});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=u(n),b=l,m=c["".concat(s,".").concat(b)]||c[b]||d[b]||a;return n?i.createElement(m,r(r({ref:t},p),{},{components:n})):i.createElement(m,r({ref:t},p))}));function b(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,r=new Array(a);r[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var u=2;u<a;u++)r[u]=n[u];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var i=n(7462),l=(n(7294),n(3905));const a={slug:"lab-6",title:"Build images from application source",sidebar_label:"Build images"},r=void 0,o={unversionedId:"for-devs/get-started/lab-6",id:"for-devs/get-started/lab-6",title:"Build images from application source",description:"Harbor needs to be activated for this lab.",source:"@site/docs/for-devs/get-started/lab-6.md",sourceDirName:"for-devs/get-started",slug:"/for-devs/get-started/lab-6",permalink:"/docs/for-devs/get-started/lab-6",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/get-started/lab-6.md",tags:[],version:"current",frontMatter:{slug:"lab-6",title:"Build images from application source",sidebar_label:"Build images"},sidebar:"mainSidebar",previous:{title:"Create GIT repos",permalink:"/docs/for-devs/get-started/lab-3"},next:{title:"Trigger builds",permalink:"/docs/for-devs/get-started/lab-26"}},s={},u=[{value:"Build the blue image",id:"build-the-blue-image",level:2},{value:"Re-run the build (optional)",id:"re-run-the-build-optional",level:2}],p={toc:u};function d(e){let{components:t,...a}=e;return(0,l.kt)("wrapper",(0,i.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Harbor needs to be activated for this lab.")),(0,l.kt)("p",null,"When your team is using Harbor for private image registries, you can build images from source using pre-configured Tekton pipelines using the ",(0,l.kt)("a",{parentName:"p",href:"https://buildpacks.io/docs/buildpack-author-guide/package-a-buildpack/"},"paketo")," task or the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/GoogleContainerTools/kaniko"},"Kaniko")," task to build images from application source."),(0,l.kt)("h2",{id:"build-the-blue-image"},"Build the blue image"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"In the left menu, click on ",(0,l.kt)("inlineCode",{parentName:"li"},"Builds")),(0,l.kt)("li",{parentName:"ol"},"Click on ",(0,l.kt)("inlineCode",{parentName:"li"},"Create Build")),(0,l.kt)("li",{parentName:"ol"},"Fill in the name ",(0,l.kt)("inlineCode",{parentName:"li"},"blue")," for your build and a tag (default tag is latest)"),(0,l.kt)("li",{parentName:"ol"},"Choose ",(0,l.kt)("inlineCode",{parentName:"li"},"Docker")," and fill in the repo URL for the ",(0,l.kt)("inlineCode",{parentName:"li"},"blue")," repo created in the previous lab"),(0,l.kt)("li",{parentName:"ol"},"Click ",(0,l.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,l.kt)("p",null,"Otomi will now create a Tekton Pipeline and PipelineRun resource to build the image. This will take around 15-20 seconds. Then the PipelineRun will start building the image. During this time the status will show ",(0,l.kt)("inlineCode",{parentName:"p"},"in progress"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"build status",src:n(6286).Z,width:"2262",height:"614"})),(0,l.kt)("p",null,"When the build is finished, the status will show ",(0,l.kt)("inlineCode",{parentName:"p"},"healthy"),":"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"build status",src:n(6959).Z,width:"2252",height:"650"})),(0,l.kt)("p",null,"To see the full PipelineRun of the build, go to the list of Builds and click on ",(0,l.kt)("inlineCode",{parentName:"p"},"PipelineRun")," of the ",(0,l.kt)("inlineCode",{parentName:"p"},"blue")," build. This will open the Tekton Dashboard and show the status of the PipelineRun of the build:"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"build status",src:n(2174).Z,width:"2386",height:"1774"})),(0,l.kt)("p",null,"When the build is ready you can see the image in Harbor:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Open Harbor"),(0,l.kt)("li",{parentName:"ol"},"Click on the project of your team. Here you will see all the registries of the team, including the registry of the new build image")),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"build status",src:n(8281).Z,width:"2904",height:"1026"})),(0,l.kt)("h2",{id:"re-run-the-build-optional"},"Re-run the build (optional)"),(0,l.kt)("p",null,"To run the build again using Otomi Console, follow these steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Change the tag of the build for example to ",(0,l.kt)("inlineCode",{parentName:"li"},"v1.0.0")),(0,l.kt)("li",{parentName:"ol"},"Submit changes")),(0,l.kt)("p",null,"To re-build the image using the same tag, restart the build pipeline using the Tekton cli in the Shell:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Start a shell in Otomi Console")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Get the name of the pipeline"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pipelines\nNAME                         AGE\ndocker-build-blue            41h\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Get the name of the pipelinerun:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pipelineruns\nNAME                       SUCCEEDED   REASON      STARTTIME   COMPLETIONTIME\ndocker-build-blue-latest   True        Succeeded   41h         41h\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Start the pipeline using the pipelinerun:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tkn pipeline start docker-build-blue --use-pipelinerun docker-build-blue-latest\nPipelineRun started: docker-build-blue-latest-j5mmt\n")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},"In order to track the PipelineRun progress run:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"tkn pipelinerun logs docker-build-blue-latest-j5mmt -f\n")),(0,l.kt)("p",null,"But it's easier to just open the Tekton dashboard and Click on ",(0,l.kt)("inlineCode",{parentName:"p"},"PipelineRuns"),"."))}d.isMDXComponent=!0},6959:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/build-status-1-dd623d6fe39f6fb039e25385d4eb394b.png"},2174:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/build-status-2-f72162487d60c10360ddeadccc2d8074.png"},8281:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/build-status-3-2c2ff329951664d48d94f6b767e52c2d.png"},6286:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/build-status-7a9f84ab84b09b3774043f58a00b4c02.png"}}]);