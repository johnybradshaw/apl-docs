"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[2144],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),u=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=u(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,b=d["".concat(s,".").concat(m)]||d[m]||c[m]||o;return n?i.createElement(b,a(a({ref:t},p),{},{components:n})):i.createElement(b,a({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<o;u++)a[u]=n[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4394:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var i=n(7462),r=(n(7294),n(3905));const o={slug:"builds",title:"Team Builds",sidebar_label:"Builds"},a=void 0,l={unversionedId:"for-devs/console/builds",id:"for-devs/console/builds",title:"Team Builds",description:"A Build in Otomi is a self-service feature for building OCI compliant images based on application source code.",source:"@site/docs/for-devs/console/builds.md",sourceDirName:"for-devs/console",slug:"/for-devs/console/builds",permalink:"/docs/for-devs/console/builds",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/console/builds.md",tags:[],version:"current",frontMatter:{slug:"builds",title:"Team Builds",sidebar_label:"Builds"},sidebar:"mainSidebar",previous:{title:"Projects",permalink:"/docs/for-devs/console/projects"},next:{title:"Workloads",permalink:"/docs/for-devs/console/workloads"}},s={},u=[{value:"Create a build",id:"create-a-build",level:2},{value:"Docker",id:"docker",level:3},{value:"Buildpacks",id:"buildpacks",level:3},{value:"Build status",id:"build-status",level:3}],p={toc:u};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A Build in Otomi is a self-service feature for building OCI compliant images based on application source code."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Ask you platform administrator to activate Harbor and Tekton to be able to use this feature.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The otomi Builds feature can only use public code repositories or private repo's in the local Gitea. Images will always be pushed to a registry in the local Harbor.")),(0,r.kt)("h2",{id:"create-a-build"},"Create a build"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enter a name for the build")),(0,r.kt)("p",null,"The name of the build will be used for the registry name of the image (",(0,r.kt)("inlineCode",{parentName:"p"},"harbor.<domainSuffix>/team-name/build-name"),")"),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"(optional) Adjust the tag")),(0,r.kt)("p",null,"The tag will be used to tag the image  (",(0,r.kt)("inlineCode",{parentName:"p"},"harbor.<domainSuffix>/team-name/build-name:tag"),")"),(0,r.kt)("p",null,"Now choose the type of the build:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"Docker")," to build an image using the ",(0,r.kt)("inlineCode",{parentName:"li"},"./Dockerfile")," in your code repository"),(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"Buildpacks")," to build an image from application source using Buildpacks")),(0,r.kt)("h3",{id:"docker"},"Docker"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the URL of the Git repository that contains the application source code"),(0,r.kt)("li",{parentName:"ol"},"(optional) Change the path of the ",(0,r.kt)("inlineCode",{parentName:"li"},"Dockerfile")),(0,r.kt)("li",{parentName:"ol"},"(optional) Change the revsion. This can be a commit, a tag, or a branch")),(0,r.kt)("h3",{id:"buildpacks"},"Buildpacks"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add the URL of the Git repository that contains the application source code"),(0,r.kt)("li",{parentName:"ol"},"(optional) Add the path. This is a subpath within the repo where the source to build is located"),(0,r.kt)("li",{parentName:"ol"},"(optional) Change the revsion. This can be a commit, a tag, or a branch")),(0,r.kt)("h3",{id:"build-status"},"Build status"),(0,r.kt)("p",null,"To see the status of a build:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start/open a shell in the console"),(0,r.kt)("li",{parentName:"ul"},"run the following command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"tkn pipelineruns list\ntkn pipelinerun logs <pipelinerun-name> -f\n")),(0,r.kt)("p",null,"Build can be restarted by changing the ",(0,r.kt)("inlineCode",{parentName:"p"},"tag")," of the build or by restarting the pipeline manually:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Start/open a shell in the console"),(0,r.kt)("li",{parentName:"ul"},"run the following command:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"tkn pipelines list\ntkn pipeline start <pipeline-name> --use-pipelinerun <pipelinerun-name>\n")))}c.isMDXComponent=!0}}]);