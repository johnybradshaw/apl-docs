"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[9846],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),d=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(a),m=n,b=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return a?r.createElement(b,s(s({ref:t},p),{},{components:a})):r.createElement(b,s({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var d=2;d<o;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5958:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=a(7462),n=(a(7294),a(3905));const o={slug:"lab-24",title:"Create a PostgreSQL database",sidebar_label:"Create a database"},s=void 0,i={unversionedId:"for-devs/get-started/lab-24",id:"for-devs/get-started/lab-24",title:"Create a PostgreSQL database",description:"Otomi by defalt installs the Cloudnative-gp database operator. Teams can use the operator to create their own PostgreSQL databases.",source:"@site/docs/for-devs/get-started/lab-24.md",sourceDirName:"for-devs/get-started",slug:"/for-devs/get-started/lab-24",permalink:"/docs/for-devs/get-started/lab-24",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/get-started/lab-24.md",tags:[],version:"current",frontMatter:{slug:"lab-24",title:"Create a PostgreSQL database",sidebar_label:"Create a database"},sidebar:"mainSidebar",previous:{title:"Create Otomi workload",permalink:"/docs/for-devs/get-started/lab-13"},next:{title:"Check policy compliance",permalink:"/docs/for-devs/get-started/lab-15"}},l={},d=[{value:"Create a database",id:"create-a-database",level:2}],p={toc:d};function c(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Otomi by defalt installs the Cloudnative-gp database operator. Teams can use the operator to create their own PostgreSQL databases."),(0,n.kt)("admonition",{type:"info"},(0,n.kt)("p",{parentName:"admonition"},"For now teams can create databases by adding a database resource to their GitOps repository. Creating databases will soon be a self-service feature in Otomi Console.")),(0,n.kt)("h2",{id:"create-a-database"},"Create a database"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"In the apps section in Otomi console, click on Gitea. In the list of repo's you'll now see a new repo called ",(0,n.kt)("inlineCode",{parentName:"li"},"otomi/team-<name>-argocd"),"."),(0,n.kt)("li",{parentName:"ol"},"Create a new file in the repo called ",(0,n.kt)("inlineCode",{parentName:"li"},"my-db.yaml"))),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  name: my-db\nspec:\n  description: "Postgres Database used in Otomi labs"\n  imageName: ghcr.io/cloudnative-pg/postgresql:15.3\n  instances: 1\n  primaryUpdateStrategy: unsupervised\n  storage:\n    size: 1Gi\n  monitoring:\n    enablePodMonitor: false\n')),(0,n.kt)("p",null,"Note that we do not enable the pod monitor."),(0,n.kt)("ol",{start:3},(0,n.kt)("li",{parentName:"ol"},"Save the file and commit the changes")),(0,n.kt)("p",null,"The operator will now create the database and add a secret to the team's namespace called ",(0,n.kt)("inlineCode",{parentName:"p"},"my-db-superuser"),". This secret contains the username and password for the database with the keys ",(0,n.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"password"),"."),(0,n.kt)("p",null,"If your application requires to use different keys, create the following ",(0,n.kt)("inlineCode",{parentName:"p"},"secretKeyRef")," variables:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-yaml"},"env:\n- name: DB_PASSWORD\n  valueFrom:\n    secretKeyRef:\n      name: my-db-superuser\n      key: password\n- name: SECRET_KEY\n  valueFrom:\n    secretKeyRef:\n      name: my-db-superuser\n      key: username\n")))}c.isMDXComponent=!0}}]);