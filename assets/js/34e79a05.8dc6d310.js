"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[3193],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var p=2;p<r;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6363:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},assets:function(){return c},toc:function(){return d},default:function(){return m}});var o=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],s={slug:"apps/gatekeeper",title:"Working with Gatekeeper",sidebar_label:"Gatekeeper"},l=void 0,p={unversionedId:"app-gatekeeper",id:"app-gatekeeper",title:"Working with Gatekeeper",description:"Introduction",source:"@site/docs/app-gatekeeper.md",sourceDirName:".",slug:"/apps/gatekeeper",permalink:"/docs/apps/gatekeeper",editUrl:"https://github.com/redkubes/redkubes.github.io/tree/master/docs/app-gatekeeper.md",tags:[],version:"current",frontMatter:{slug:"apps/gatekeeper",title:"Working with Gatekeeper",sidebar_label:"Gatekeeper"},sidebar:"mainSidebar",previous:{title:"Hashicorp Vault",permalink:"/docs/apps/vault"},next:{title:"Ingress-NGINX",permalink:"/docs/apps/ingress-nginx"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Security in-depth",id:"security-in-depth",level:3},{value:"Statical analysis",id:"statical-analysis",level:3},{value:"Runtime protection",id:"runtime-protection",level:3},{value:"Gatekeeper",id:"gatekeeper",level:2},{value:"Change mode",id:"change-mode",level:3},{value:"Switch to Enforcing mode",id:"switch-to-enforcing-mode",level:3},{value:"Switch to Disabled mode",id:"switch-to-disabled-mode",level:3},{value:"Using annotations to bypass policy checks",id:"using-annotations-to-bypass-policy-checks",level:3}],u={toc:d};function m(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Otomi offers Kubernetes security best practices through security constraints defined as OPA policies and enforced by Gatekeeper."),(0,r.kt)("h3",{id:"security-in-depth"},"Security in-depth"),(0,r.kt)("p",null,"OPA policies are a replacement for the native PodSecurityPolicies and all defined policies are modeled after the most common psp setups. The Otomi values repository holds a ",(0,r.kt)("inlineCode",{parentName:"p"},"policies.yaml")," file with sane default presets. The full set of all policies can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redkubes/otomi-core/tree/master/policies"},"here"),". Please see the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/open-policy-agent/gatekeeper-library"},"OPA Gatekeeper policy library")," as it is the source for the policy baseline here. We made a selection of usable policies for Otomi and adapted them to be used by Conftest as well for static analysis of manifests generated by Otomi. YAML Resources are verified against defined .rego policy rules, using the defined preset parameters as their constraint value."),(0,r.kt)("h3",{id:"statical-analysis"},"Statical analysis"),(0,r.kt)("p",null,"Otomi's generated resources are statically evaluated by Conftest before deployment, but also at build time. This gives developers the tools to test their manifests locally, and increases certainty that only valid output will be generated."),(0,r.kt)("h3",{id:"runtime-protection"},"Runtime protection"),(0,r.kt)("p",null,"The same policies are upheld by OPA's Gatekeeper on the cluster during runtime, making sure all deployed resources are approved by it's admission hook."),(0,r.kt)("h2",{id:"gatekeeper"},"Gatekeeper"),(0,r.kt)("p",null,"Otomi supports 3 modes:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enforcing"),(0,r.kt)("li",{parentName:"ol"},"Permissive (default)"),(0,r.kt)("li",{parentName:"ol"},"Disabled")),(0,r.kt)("p",null,"In both Enforcing and Permissive mode, individual policies can be switched on or off. By default gatekeeper is enabled in permissive mode (logging & non-blocking)"),(0,r.kt)("p",null,"Customization of the policies is supported based on the Otomi ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/redkubes/otomi-core/blob/master/values-schema.yaml"},"schema")," (or use Otomi Console). In case of specific requirements, admins can add their own custom policies."),(0,r.kt)("h3",{id:"change-mode"},"Change mode"),(0,r.kt)("p",null,"Gatekeeper can be set to enforcing mode or disabled mode by editing the ",(0,r.kt)("inlineCode",{parentName:"p"},"values/env/charts/gatekeeper-operator.yaml")," file:"),(0,r.kt)("h3",{id:"switch-to-enforcing-mode"},"Switch to Enforcing mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"charts:\n  gatekeeper:\n    disableValidatingWebhook: false\n")),(0,r.kt)("h3",{id:"switch-to-disabled-mode"},"Switch to Disabled mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"charts:\n  gatekeeper:\n    enabled: false\n")),(0,r.kt)("h3",{id:"using-annotations-to-bypass-policy-checks"},"Using annotations to bypass policy checks"),(0,r.kt)("p",null,"It is possible to deviate from the baseline, provided there is a substantiated reason for doing so. To deviate from the baseline, annotations for the pod spec can be configured. Gatekeeper always keeps a log and thus it is traceable when an annotation is used. The use of annotations is a specific Otomi feature."),(0,r.kt)("p",null,"In order to bypass the policy checks that are enforced by Gatekeeper, Otomi provides an override mechanism to disable or parameterize policy checks by means of annotations. This is based on a gentlemen's approach, and will be RBAC enforced in a future version of Otomi. The policy engine is aware of the following annotations for a pod spec:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'annotations:\n  policy.otomi.io/ignore: $policy[,$policy2] # pod level ignore for all containers\n  policy.otomi.io/ignore-sidecar: $policy[,$policy2] # pod level ignore for sidecars, such as istio-proxy\n  policy.otomi.io/ignore.$container: $policy[,$policy2] # ignore for just the mentioned container\n  policy.otomi.io/parameters.$policy: \'{"extra":"parameters"}\'\n')),(0,r.kt)("p",null,"Parameters will be merged with the default parameters passed to the rule (as defined in the policies.yaml file in the values repo). No override exists for a specific container to provide parameters for."))}m.isMDXComponent=!0}}]);