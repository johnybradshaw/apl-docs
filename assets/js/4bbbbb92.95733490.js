"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[6647],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,k=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8514:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={slug:"lab-27",title:"OpenTelemetry",sidebar_label:"Use OpenTelemery"},l=void 0,o={unversionedId:"for-devs/get-started/lab-27",id:"for-devs/get-started/lab-27",title:"OpenTelemetry",description:"In order to make a system observable, it must be instrumented. Language specific implementation of OpenTelemetry provides a way to instrument your application without touching your source code. In this lab we're going to instrument a Java application.",source:"@site/docs/for-devs/get-started/lab-27.md",sourceDirName:"for-devs/get-started",slug:"/for-devs/get-started/lab-27",permalink:"/docs/for-devs/get-started/lab-27",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/get-started/lab-27.md",tags:[],version:"current",frontMatter:{slug:"lab-27",title:"OpenTelemetry",sidebar_label:"Use OpenTelemery"},sidebar:"mainSidebar",previous:{title:"Monitor databases",permalink:"/docs/for-devs/get-started/lab-25"},next:{title:"Canary Deployments",permalink:"/docs/for-devs/get-started/lab-28"}},p={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Build an image from source code",id:"build-an-image-from-source-code",level:2},{value:"Create a workload from the developer catalog",id:"create-a-workload-from-the-developer-catalog",level:2},{value:"Expose the service",id:"expose-the-service",level:2},{value:"See traces",id:"see-traces",level:2}],c={toc:s};function m(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In order to make a system observable, it must be instrumented. Language specific implementation of OpenTelemetry provides a way to instrument your application without touching your source code. In this lab we're going to instrument a Java application."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"For this lab it is required to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Enable ",(0,r.kt)("inlineCode",{parentName:"li"},"Tempo")),(0,r.kt)("li",{parentName:"ul"},"Enable tracing for ",(0,r.kt)("inlineCode",{parentName:"li"},"Istio")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Nginx Ingress"))),(0,r.kt)("h2",{id:"build-an-image-from-source-code"},"Build an image from source code"),(0,r.kt)("p",null,"For this lab we're going to use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/spring-projects/spring-petclinic"},"Spring PetClinic Sample Application"),". Follow these steps to build an image from source code:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new repo called ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinic"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Clone the Spring PetClinic Sample Application:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/spring-projects/spring-petclinic.git\ncd spring-petclinic\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Mirror the Spring PetClinic Sample Application to your ",(0,r.kt)("inlineCode",{parentName:"li"},"petclinc")," repo:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"git push --mirror https://gitea.<your-domain>/<your-user-name>/petclinic.git\n")),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Builds")," in the left menu and click ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Build"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fill in the Build name ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinic"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Choose ",(0,r.kt)("inlineCode",{parentName:"p"},"Buildpacks"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Fill in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Repo URL")," with the ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinic")," Gitea repo you created")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("inlineCode",{parentName:"p"},"Submit")))),(0,r.kt)("h2",{id:"create-a-workload-from-the-developer-catalog"},"Create a workload from the developer catalog"),(0,r.kt)("p",null,"Go to the list of Builds and add the repository of the ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinc")," build to your clipboard. Remember that the tag is latest."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Workloads")," in the right menu and click on ",(0,r.kt)("inlineCode",{parentName:"p"},"New Workload"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add the Name ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinic")," for the workload")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select ",(0,r.kt)("inlineCode",{parentName:"p"},"otomi-quickstart-k8s-deployment-otel")," from the catalog")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Leave the ",(0,r.kt)("inlineCode",{parentName:"p"},"Auto image updater")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Disabled"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the workload ",(0,r.kt)("inlineCode",{parentName:"p"},"values"),", change the following parameters:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"image:\n  repository: <paste from clipboard>\n  tag: latest\n")),(0,r.kt)("p",null,"Because we're deploying a Java application here, maybe also change the resources:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"resources:\n  limits:\n    cpu: 500m\n    memory: 1Gi\n  requests:\n    cpu: 300m\n    memory: 256Mi\n")),(0,r.kt)("ol",{start:6},(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,r.kt)("p",null,"Now click on ",(0,r.kt)("inlineCode",{parentName:"p"},"Deploy Changes")),(0,r.kt)("h2",{id:"expose-the-service"},"Expose the service"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In the left menu panel under click ",(0,r.kt)("inlineCode",{parentName:"p"},"Services")," then click on ",(0,r.kt)("inlineCode",{parentName:"p"},"Create Service"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Select the ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinic")," service")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Under ",(0,r.kt)("inlineCode",{parentName:"p"},"Exposure Ingress"),", select ",(0,r.kt)("inlineCode",{parentName:"p"},"Ingress")," and use the default configuration")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("inlineCode",{parentName:"p"},"Submit"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Click ",(0,r.kt)("inlineCode",{parentName:"p"},"Deploy Changes")))),(0,r.kt)("h2",{id:"see-traces"},"See traces"),(0,r.kt)("p",null,"To be able to see traces, we'll first need to generate some requests. Click on the URL of the ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinic")," service and generate some requests."),(0,r.kt)("p",null,"To see traces, you'll first need to find a ",(0,r.kt)("inlineCode",{parentName:"p"},"TraceID")," of a trace. Go to ",(0,r.kt)("inlineCode",{parentName:"p"},"Apps")," in the left menu and then click op ",(0,r.kt)("inlineCode",{parentName:"p"},"Loki"),". Select the label ",(0,r.kt)("inlineCode",{parentName:"p"},"App")," and select value ",(0,r.kt)("inlineCode",{parentName:"p"},"petclinic"),"."),(0,r.kt)("p",null,"Click on a log entry of a request. Note that the requests are logged by the Istio Envoy proxy. You will now see a link to Tempo. Click on it."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Team apps",src:a(2681).Z,width:"3848",height:"2486"})),(0,r.kt)("p",null,"And when you click on the Node graph, you\u2019ll see the complete flow:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Team apps",src:a(6621).Z,width:"3848",height:"2250"})))}m.isMDXComponent=!0},6621:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/traces-loki-nodes-38816351351dd20a779500a0c943ef79.png"},2681:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/traces-loki-7acf9107b085b83d75001a9138a0e4bb.png"}}]);