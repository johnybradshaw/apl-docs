"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[5531],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var a=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,o=function(e,t){if(null==e)return{};var r,a,o={},n=Object.keys(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)r=n[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,b=p["".concat(s,".").concat(m)]||p[m]||d[m]||n;return r?a.createElement(b,i(i({ref:t},u),{},{components:r})):a.createElement(b,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=r.length,i=new Array(n);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<n;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},4348:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>n,metadata:()=>l,toc:()=>c});var a=r(7462),o=(r(7294),r(3905));const n={slug:"lab-5",title:"Push your container images",sidebar_label:"Lab 5"},i=void 0,l={unversionedId:"for-devs/get-started/lab-5",id:"for-devs/get-started/lab-5",title:"Push your container images",description:"Now that you have kubectl access to your team namespace, you are ready to deploy your first container. When the platform administrator created your team, a private container registry has been automatically created for your team in Harbor and a pull secret has been added to your team namespace. To be able to push container images to your private registries, you'll first need to create a robot-account in your Harbor project with push access rights.",source:"@site/docs/for-devs/get-started/lab-5.md",sourceDirName:"for-devs/get-started",slug:"/for-devs/get-started/lab-5",permalink:"/docs/for-devs/get-started/lab-5",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/get-started/lab-5.md",tags:[],version:"current",frontMatter:{slug:"lab-5",title:"Push your container images",sidebar_label:"Lab 5"},sidebar:"mainSidebar",previous:{title:"lab 4",permalink:"/docs/for-devs/get-started/lab-4"},next:{title:"Lab 6",permalink:"/docs/for-devs/get-started/lab-6"}},s={},c=[{value:"Access Harbor UI",id:"access-harbor-ui",level:2},{value:"Login to Harbor",id:"login-to-harbor",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Now that you have kubectl access to your team namespace, you are ready to deploy your first container. When the platform administrator created your team, a private container registry has been automatically created for your team in Harbor and a pull secret has been added to your team namespace. To be able to push container images to your private registries, you'll first need to create a robot-account in your Harbor project with push access rights."),(0,o.kt)("h2",{id:"access-harbor-ui"},"Access Harbor UI"),(0,o.kt)("p",null,"In the apps section in Otomi console, you'll see an app called Harbor. Click on it and follow these steps:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Choose ",(0,o.kt)("inlineCode",{parentName:"li"},"Login via OIDC provider"))),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"oidc",src:r(4419).Z,width:"2198",height:"1458"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set your OIDC user name")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"harbor-oidc",src:r(3767).Z,width:"1344",height:"776"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In Harbor you'll see all the projects of the teams that you are a member of")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"harbor-projects",src:r(2946).Z,width:"2474",height:"1378"})),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Click on the project of your team. Here you will see all the registries of the team")),(0,o.kt)("h2",{id:"login-to-harbor"},"Login to Harbor"),(0,o.kt)("p",null,"To be able to push images to Harbor, you'll need a robot account with push permissions. Otomi offers teams with a self-service option to download the Docker config for their team's private registry in Harbor. In the left menu you will see the option ",(0,o.kt)("inlineCode",{parentName:"p"},"Download DOCKERCFG"),". Click on it to download the credentials."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"harbor-projects",src:r(9256).Z,width:"2412",height:"980"})),(0,o.kt)("p",null,"When you have downloaded the docker config then run ",(0,o.kt)("inlineCode",{parentName:"p"},"docker login"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker login -u 'otomi-team-<team-name>-push' -p <token> harbor.<your-domain>\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If Docker refuses to connect with an error\n",(0,o.kt)("inlineCode",{parentName:"p"},"x509: certificate signed by unknown authority"),", go to the Otomi Console,\nand click ",(0,o.kt)("inlineCode",{parentName:"p"},"Download CA")," (if you have not done so already); then copy the\nobtained file to ",(0,o.kt)("inlineCode",{parentName:"p"},"~/.docker/ca.crt")," or restart docker desktop.")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Build and tag your image")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker build -t harbor.<your-domain>/<team-name>/<image-name>:<tag> .\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Push the image to Harbor")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker push harbor.<your-domain>/<team-name>/<image-name>:<tag>\n")))}d.isMDXComponent=!0},9256:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/download-dcfg-fd74665a878106666bd462d66add904f.png"},4419:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/harbor-oidc-d75571afb9485dee778fee74cb6b33d9.png"},2946:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/harbor-projects-1eeb9db71bd67b284169f5ea4494dc14.png"},3767:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/harbor-user-name-ce1b5f1731671cd0a8d46d4967eb680f.png"}}]);