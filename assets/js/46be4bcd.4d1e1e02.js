"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[7973],{3905:(t,e,a)=>{a.d(e,{Zo:()=>u,kt:()=>c});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var m=n.createContext({}),s=function(t){var e=n.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},u=function(t){var e=s(t.components);return n.createElement(m.Provider,{value:e},t.children)},d={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},p=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,m=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),p=s(a),c=r,k=p["".concat(m,".").concat(c)]||p[c]||d[c]||l;return a?n.createElement(k,o(o({ref:e},u),{},{components:a})):n.createElement(k,o({ref:e},u))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=p;var i={};for(var m in e)hasOwnProperty.call(e,m)&&(i[m]=e[m]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var s=2;s<l;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},4316:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const l={slug:"workloads",title:"Team Workloads",sidebar_label:"Workloads"},o=void 0,i={unversionedId:"for-devs/console/workloads",id:"for-devs/console/workloads",title:"Team Workloads",description:"A Workload in Otomi is a self-service feature for:",source:"@site/docs/for-devs/console/workloads.md",sourceDirName:"for-devs/console",slug:"/for-devs/console/workloads",permalink:"/docs/for-devs/console/workloads",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/console/workloads.md",tags:[],version:"current",frontMatter:{slug:"workloads",title:"Team Workloads",sidebar_label:"Workloads"},sidebar:"mainSidebar",previous:{title:"Builds",permalink:"/docs/for-devs/console/builds"},next:{title:"Services",permalink:"/docs/for-devs/console/services"}},m={},s=[{value:"Workloads (all)",id:"workloads-all",level:2},{value:"Create a Workload",id:"create-a-workload",level:2},{value:"Regular application",id:"regular-application",level:3},{value:"Function as a Service",id:"function-as-a-service",level:3},{value:"BYO Helm chart",id:"byo-helm-chart",level:3},{value:"(optional) Configure Auto Image Updater",id:"optional-configure-auto-image-updater",level:4},{value:"Basic values",id:"basic-values",level:3},{value:"Advanced values",id:"advanced-values",level:3}],u={toc:s};function d(t){let{components:e,...a}=t;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"A Workload in Otomi is a self-service feature for:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Deploying Kubernetes workloads",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"A regular Kubernetes deployment with a HPA (Horizontal Pod Autoscaler)"),(0,r.kt)("li",{parentName:"ul"},"A Knative service"))),(0,r.kt)("li",{parentName:"ul"},"Automatically create the ArgoCD resources to deploy the workload in a GitOps way"),(0,r.kt)("li",{parentName:"ul"},"Manage the custom values of the workloads in Git")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Ask you platform administrator to activate ArgoCD to be able to use this feature.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Ask you platform administrator to activate Knative to be able to create Function as a Service workloads.")),(0,r.kt)("h2",{id:"workloads-all"},"Workloads (all)"),(0,r.kt)("p",null,"All known Workloads of the team are listed here."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Workload Name"),(0,r.kt)("td",{parentName:"tr",align:null},"The name of the workload")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Type"),(0,r.kt)("td",{parentName:"tr",align:null},"The type of the workload (deployment/ksvc/custom)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Argocd"),(0,r.kt)("td",{parentName:"tr",align:null},"Link to the ArgoCD application in the ArgoCD UI")))),(0,r.kt)("h2",{id:"create-a-workload"},"Create a Workload"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the right menu click on ",(0,r.kt)("inlineCode",{parentName:"p"},"Workloads")," and then on ",(0,r.kt)("inlineCode",{parentName:"p"},"Create workload"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Select the workload type"))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Regular application: will use the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redkubes/otomi-charts"},"Otomi deployment Helm chart")),(0,r.kt)("li",{parentName:"ul"},"Function as a Service: will use the ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redkubes/otomi-charts"},"Otomi Knative service Helm chart")),(0,r.kt)("li",{parentName:"ul"},"Bring your own Helm chart: use your own (custom) Helm chart")),(0,r.kt)("h3",{id:"regular-application"},"Regular application"),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Enter a name for the workload"),(0,r.kt)("li",{parentName:"ol"},"Provide ",(0,r.kt)("a",{parentName:"li",href:"#basic-values"},"Basic")," or ",(0,r.kt)("a",{parentName:"li",href:"#advanced-values"},"Advanced")," values configuration"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Next")),(0,r.kt)("li",{parentName:"ol"},"Review the Values used to install the chart. Optionally add more values. See ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redkubes/otomi-charts/blob/main/deployment/values.yaml"},"here")," for all supported values"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,r.kt)("p",null,"Now click on ",(0,r.kt)("inlineCode",{parentName:"p"},"application")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Argocd")," column of the workload in the list of workloads. Note that an ArgoCD application is created to deploy the workload."),(0,r.kt)("h3",{id:"function-as-a-service"},"Function as a Service"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enter a name for the workload"),(0,r.kt)("li",{parentName:"ol"},"Provide ",(0,r.kt)("a",{parentName:"li",href:"#basic-values"},"Basic")," or ",(0,r.kt)("a",{parentName:"li",href:"#advanced-values"},"Advanced")," values configuration"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Next")),(0,r.kt)("li",{parentName:"ol"},"Review the Values used to install the chart. Optionally add more values. See ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/redkubes/otomi-charts/blob/main/ksvc/values.yaml"},"here")," for all supported values"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,r.kt)("p",null,"Now click on ",(0,r.kt)("inlineCode",{parentName:"p"},"application")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Argocd")," column of the workload in the list of workloads. Note that an ArgoCD application is created to deploy the workload."),(0,r.kt)("h3",{id:"byo-helm-chart"},"BYO Helm chart"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Enter a name for the workload"),(0,r.kt)("li",{parentName:"ol"},"Enter the URL to the Git repo containing the Helm Chart or a Helm repository."),(0,r.kt)("li",{parentName:"ol"},"Add the relative path to a directory within the Git repository. Use ",(0,r.kt)("inlineCode",{parentName:"li"},"./")," when no directory is used."),(0,r.kt)("li",{parentName:"ol"},"Optionally (only when using a Chart registry) add the name of the Helm chart."),(0,r.kt)("li",{parentName:"ol"},"Enter the revision. In case of using a Git repo, this can be commit, tag, or branch. If omitted, will equal to HEAD. In case of using a Chart repository, this is a semver tag for the Chart's version"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Next")),(0,r.kt)("li",{parentName:"ol"},"Review the Values used to install the chart"),(0,r.kt)("li",{parentName:"ol"},"Click ",(0,r.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,r.kt)("p",null,"Now click on ",(0,r.kt)("inlineCode",{parentName:"p"},"Deploy Changes")),(0,r.kt)("p",null,"After a few minutes, Otomi will have created all the needed ArgoCD resources to deploy your workload. In the workloads list, click on the ",(0,r.kt)("inlineCode",{parentName:"p"},"Application")," link of your workload to see the status of your workload."),(0,r.kt)("p",null,"The values of a workload can be changed at any time. Changes will automatically be deployed."),(0,r.kt)("h4",{id:"optional-configure-auto-image-updater"},"(optional) Configure Auto Image Updater"),(0,r.kt)("p",null,"Workloads with a BYO Helm chart can be configured with the Auto Image Updater. The Auto Image Updater will (based on the update strategy) update the deployed image."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Using the auto image updater is only supported when the Helm chart is in a local Gitea repository on the platform, and the image is stored in the local Harbor on the platform.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If the URL for the chart is a local Gitea repo, the option to enable the Auto Image updater will become active. Select ",(0,r.kt)("inlineCode",{parentName:"li"},"Enabled")),(0,r.kt)("li",{parentName:"ol"},"Fill in a Build name (a Build created in Otomi) or the name of an existing image in harbor (without ",(0,r.kt)("inlineCode",{parentName:"li"},"*/team-<name>/"),")"),(0,r.kt)("li",{parentName:"ol"},"Select the Update strategy. Choose between:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Latest: Update to the most recently built image."),(0,r.kt)("li",{parentName:"ul"},"Digest: Update to the most recent pushed version of a given tag. Requires to provide a ",(0,r.kt)("inlineCode",{parentName:"li"},"tag"),"."),(0,r.kt)("li",{parentName:"ul"},"Semver: Update based on semantic versions. Example: ",(0,r.kt)("inlineCode",{parentName:"li"},"1.0")," would allow the image to be updated to any patch version within the 1.0 minor release.")),(0,r.kt)("h3",{id:"basic-values"},"Basic values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Title"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Image - Registry"),(0,r.kt)("td",{parentName:"tr",align:null},"image.registry"),(0,r.kt)("td",{parentName:"tr",align:null},"The registry name of the image to deploy")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Image - Tag"),(0,r.kt)("td",{parentName:"tr",align:null},"image.tag"),(0,r.kt)("td",{parentName:"tr",align:null},"The tag of the image to deploy")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Port - Containerport"),(0,r.kt)("td",{parentName:"tr",align:null},"containerPorts: []"),(0,r.kt)("td",{parentName:"tr",align:null},"The port of the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Resources - Requests vCPU"),(0,r.kt)("td",{parentName:"tr",align:null},"resources.requests.cpu"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal amount of vCPU needed to run the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Resources - Requests Memory"),(0,r.kt)("td",{parentName:"tr",align:null},"resources.requests.memory"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal amount of memory needed to run the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Instances - Min"),(0,r.kt)("td",{parentName:"tr",align:null},"autoscaling.minReplicas"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal amount of containers to run. It's advised to always run at least 2 (default for a regular application). In case of a Function as a Service, the minimal amount of instances is set to 0. A container is started at the first request (scale to zero configuration)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Instances - Max"),(0,r.kt)("td",{parentName:"tr",align:null},"autoscaling.maxReplicas"),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum of containers to run. The autoscaling mechanism in this case will never scale above the configured max instances")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Container security context - run as user"),(0,r.kt)("td",{parentName:"tr",align:null},"podSecurityContext.runAsUser"),(0,r.kt)("td",{parentName:"tr",align:null},"Containers must not set to run as user (default) 1001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Container security context - run as non root"),(0,r.kt)("td",{parentName:"tr",align:null},"podSecurityContext.runAsNonRoot"),(0,r.kt)("td",{parentName:"tr",align:null},"Select to run the container as a non-root user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Container security context - read only file system"),(0,r.kt)("td",{parentName:"tr",align:null},"podSecurityContext.readOnlyRootFilesystem"),(0,r.kt)("td",{parentName:"tr",align:null},"Select to make the root filesystem immutable")))),(0,r.kt)("h3",{id:"advanced-values"},"Advanced values"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Title"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Image - Registry"),(0,r.kt)("td",{parentName:"tr",align:null},"image.registry"),(0,r.kt)("td",{parentName:"tr",align:null},"The registry name of the image to deploy")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Image - Tag"),(0,r.kt)("td",{parentName:"tr",align:null},"image.tag"),(0,r.kt)("td",{parentName:"tr",align:null},"The tag of the image to deploy")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Port - Containerport"),(0,r.kt)("td",{parentName:"tr",align:null},"containerPorts: []"),(0,r.kt)("td",{parentName:"tr",align:null},"The port of the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Resources - Requests vCPU"),(0,r.kt)("td",{parentName:"tr",align:null},"resources.requests.cpu"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal amount of vCPU needed to run the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Resources - Requests Memory"),(0,r.kt)("td",{parentName:"tr",align:null},"resources.requests.memory"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal amount of memory needed to run the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Resources - Limits vCPU"),(0,r.kt)("td",{parentName:"tr",align:null},"resources.requests.cpu"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal amount of vCPU needed to run the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Resources - Limits Memory"),(0,r.kt)("td",{parentName:"tr",align:null},"resources.requests.memory"),(0,r.kt)("td",{parentName:"tr",align:null},"The minimal amount of memory needed to run the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Instances - Max"),(0,r.kt)("td",{parentName:"tr",align:null},"autoscaling.maxReplicas"),(0,r.kt)("td",{parentName:"tr",align:null},"The maximum of containers to run. The autoscaling mechanism in this case will never scale above the configured max instances")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Environment variables"),(0,r.kt)("td",{parentName:"tr",align:null},"env: []"),(0,r.kt)("td",{parentName:"tr",align:null},"Environment variables for containers")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Command arguments"),(0,r.kt)("td",{parentName:"tr",align:null},"command: []"),(0,r.kt)("td",{parentName:"tr",align:null},"Override the arguments given to the entrypoint/command of the container")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Labels"),(0,r.kt)("td",{parentName:"tr",align:null},"labels: {}"),(0,r.kt)("td",{parentName:"tr",align:null},"A set of labels that will be added to all the manifests")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Annotations"),(0,r.kt)("td",{parentName:"tr",align:null},"annotations: {}"),(0,r.kt)("td",{parentName:"tr",align:null},"Annotations for pods")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Secret name"),(0,r.kt)("td",{parentName:"tr",align:null},"secrets: []"),(0,r.kt)("td",{parentName:"tr",align:null},"Set secrets as container environment variables using a secretRef. Select from secrets managed in Otomi/Vault")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Container security context - run as user"),(0,r.kt)("td",{parentName:"tr",align:null},"podSecurityContext.runAsUser"),(0,r.kt)("td",{parentName:"tr",align:null},"Containers must not set to run as user (default) 1001")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Container security context - run as non root"),(0,r.kt)("td",{parentName:"tr",align:null},"podSecurityContext.runAsNonRoot"),(0,r.kt)("td",{parentName:"tr",align:null},"Select to run the container as a non-root user")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Container security context - read only file system"),(0,r.kt)("td",{parentName:"tr",align:null},"podSecurityContext.readOnlyRootFilesystem"),(0,r.kt)("td",{parentName:"tr",align:null},"Select to make the root filesystem immutable")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Files"),(0,r.kt)("td",{parentName:"tr",align:null},"files: {}"),(0,r.kt)("td",{parentName:"tr",align:null},"Entries of absolute path > content pairs. One caveat: content can be 131072 chars max")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Secret mounts"),(0,r.kt)("td",{parentName:"tr",align:null},"secretMounts: {}"),(0,r.kt)("td",{parentName:"tr",align:null},"Pairs of secret name > absolute folder path. Will mount the contents of the secret in the container at the specified folder path")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Service ports"),(0,r.kt)("td",{parentName:"tr",align:null},"servicePorts: []"),(0,r.kt)("td",{parentName:"tr",align:null},"Configures the service ports to listens on. Exposes on port 80 by default, using the http port of the pod")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Service monitor"),(0,r.kt)("td",{parentName:"tr",align:null},"serviceMonitor.create"),(0,r.kt)("td",{parentName:"tr",align:null},"Select to create a a Prometheus Operator ServiceMonitor for custom metrics")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Service monitor endpoints"),(0,r.kt)("td",{parentName:"tr",align:null},"endpoints: []"),(0,r.kt)("td",{parentName:"tr",align:null},"Add endpoints. Note that the port also needs to be exposed by the container")))))}d.isMDXComponent=!0}}]);