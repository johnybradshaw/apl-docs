"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[4890],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=c(a),d=r,y=m["".concat(s,".").concat(d)]||m[d]||p[d]||l;return a?n.createElement(y,o(o({ref:t},u),{},{components:a})):n.createElement(y,o({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},812:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const l={slug:"scaleway",title:"Scaleway",sidebar_label:"Scaleway"},o="Install Otomi on Scaleway Kubernetes Kapsule with Scaleway DNS",i={unversionedId:"get-started/installation/scaleway",id:"get-started/installation/scaleway",title:"Scaleway",description:"Prerequisites",source:"@site/docs/get-started/installation/scaleway.md",sourceDirName:"get-started/installation",slug:"/get-started/installation/scaleway",permalink:"/docs/get-started/installation/scaleway",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/get-started/installation/scaleway.md",tags:[],version:"current",frontMatter:{slug:"scaleway",title:"Scaleway",sidebar_label:"Scaleway"},sidebar:"mainSidebar",previous:{title:"Linode",permalink:"/docs/get-started/installation/linode"},next:{title:"Minikube",permalink:"/docs/get-started/installation/minikube"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create a Kubernetes Kapsule cluster",id:"create-a-kubernetes-kapsule-cluster",level:2},{value:"Configure DNS",id:"configure-dns",level:2},{value:"Importing a Domain into Scaleway DNS",id:"importing-a-domain-into-scaleway-dns",level:3},{value:"Creating Scaleway Credentials",id:"creating-scaleway-credentials",level:3},{value:"Create the values.yaml file",id:"create-the-valuesyaml-file",level:2},{value:"Install Otomi",id:"install-otomi",level:2}],u={toc:c};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"install-otomi-on-scaleway-kubernetes-kapsule-with-scaleway-dns"},"Install Otomi on Scaleway Kubernetes Kapsule with Scaleway DNS"),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/scaleway/scaleway-cli"},"Scaleway CLI")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/tasks/tools/"},"Helm"))),(0,r.kt)("h2",{id:"create-a-kubernetes-kapsule-cluster"},"Create a Kubernetes Kapsule cluster"),(0,r.kt)("p",null,"Set the Project ID variable:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'SCW_DEFAULT_PROJECT_ID=""\n')),(0,r.kt)("p",null,"And run the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'SCALEWAY_CLUSTER_NAME="otomi"\nSCALEWAY_NODE_TYPE="PRO2-M"\nSCALEWAY_NODE_POOL_MIN_SIZE=3\nSCALEWAY_K8s_VERSION="1.27.6"\nSCALEWAY_PRIVATE_NETWORK_ID=$(scw vpc private-network create project-id=$SCW_DEFAULT_PROJECT_ID name=$SCALEWAY_CLUSTER_NAME-pn region=nl-ams -ojson | jq -r .id)\nscw k8s cluster create name=$SCALEWAY_CLUSTER_NAME \\\n    project-id=$SCW_DEFAULT_PROJECT_ID \\\n    private-network-id=$SCALEWAY_PRIVATE_NETWORK_ID \\\n    auto-upgrade.enable=false \\\n    cni=calico \\\n    pools.0.node-type=$SCALEWAY_NODE_TYPE \\\n    pools.0.min-size=$SCALEWAY_NODE_POOL_MIN_SIZE \\\n    pools.0.size=$SCALEWAY_NODE_POOL_MIN_SIZE \\\n    pools.0.max-size=3 \\\n    pools.0.autohealing=true \\\n    pools.0.autoscaling=true \\\n    pools.0.name=$SCALEWAY_CLUSTER_NAME \\\n    pools.0.root-volume-size=50GB \\\n    version=$SCALEWAY_K8s_VERSION \\\n    region=nl-ams\n')),(0,r.kt)("h2",{id:"configure-dns"},"Configure DNS"),(0,r.kt)("admonition",{title:"AlERT",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Support for Scaleway DNS will be available soon!")),(0,r.kt)("h3",{id:"importing-a-domain-into-scaleway-dns"},"Importing a Domain into Scaleway DNS"),(0,r.kt)("p",null,"In order to use your domain, you need to import it into Scaleway DNS. If it's not already done, you can follow ",(0,r.kt)("a",{parentName:"p",href:"https://www.scaleway.com/en/docs/scaleway-dns/"},"this documentation")),(0,r.kt)("p",null,"Once the domain is imported you can either use the root zone, or create a subzone to use."),(0,r.kt)("p",null,"In this example we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"example.com")," as an example."),(0,r.kt)("h3",{id:"creating-scaleway-credentials"},"Creating Scaleway Credentials"),(0,r.kt)("p",null,"To use Otomi with Scaleway DNS, you need to create an API token (composed of the Access Key and the Secret Key).\nYou can either use existing ones or you can create a new token, as explained in ",(0,r.kt)("a",{parentName:"p",href:"https://www.scaleway.com/en/docs/generate-an-api-token/"},"How to generate an API token")," or directly by going to the ",(0,r.kt)("a",{parentName:"p",href:"https://console.scaleway.com/account/organization/credentials"},"credentials page"),"."),(0,r.kt)("p",null,"Add the Access ans Secret key's to your environment variables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'SCW_ACCESS_KEY="<your-access-key>"\nSCW_SECRET_KEY="your-secret-key"\n')),(0,r.kt)("h2",{id:"create-the-valuesyaml-file"},"Create the values.yaml file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tee values.yaml<<EOF\ncluster:\n  name: otomi\n  provider: scaleway\n  domainSuffix: your-sub-domain.example.com\notomi:\n  hasExternalDNS: true\n  version: scaleway-dns\ndns:\n  domainFilters: \n    - example.com\n  provider:\n    scaleway:\n      scwAccessKey: $SCW_ACCESS_KEY\n      scwSecretKey: $SCW_SECRET_KEY\napps:\n  cert-manager:\n    issuer: letsencrypt\n    stage: production\n    email: admin@example.com\nEOF\n")),(0,r.kt)("p",null,"And adjust the ",(0,r.kt)("inlineCode",{parentName:"p"},"domainSuffix"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"domainFilters")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"email")," based on your domain."),(0,r.kt)("h2",{id:"install-otomi"},"Install Otomi"),(0,r.kt)("p",null,"Install Otomi using Helm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add otomi https://otomi.io/otomi-core\nhelm repo update\nhelm install -f values.yaml otomi otomi/otomi\n")),(0,r.kt)("p",null,"Monitor the logs of the installer job:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs jobs/otomi -n default -f\n")),(0,r.kt)("p",null,"When the installer is finished, copy the ",(0,r.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"admin-password")," from the console output."),(0,r.kt)("p",null,"Follow the activation steps ",(0,r.kt)("a",{parentName:"p",href:"https://otomi.io/docs/get-started/activation"},"here.")))}p.isMDXComponent=!0}}]);