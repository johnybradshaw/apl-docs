"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[1696],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,b=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return n?i.createElement(b,l(l({ref:t},u),{},{components:n})):i.createElement(b,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2402:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={slug:"lab-6",title:"Build images from application source",sidebar_label:"Build images with Otomi"},l=void 0,o={unversionedId:"for-devs/get-started/lab-6",id:"for-devs/get-started/lab-6",title:"Build images from application source",description:"Prerequisite: For this lab, Harbor and Tekton need to be activated.",source:"@site/docs/for-devs/get-started/lab-6.md",sourceDirName:"for-devs/get-started",slug:"/for-devs/get-started/lab-6",permalink:"/docs/for-devs/get-started/lab-6",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/get-started/lab-6.md",tags:[],version:"current",frontMatter:{slug:"lab-6",title:"Build images from application source",sidebar_label:"Build images with Otomi"},sidebar:"mainSidebar",previous:{title:"Push images",permalink:"/docs/for-devs/get-started/lab-5"},next:{title:"Scan images",permalink:"/docs/for-devs/get-started/lab-7"}},s={},p=[],u={toc:p};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Prerequisite: For this lab, Harbor and Tekton need to be activated.")),(0,a.kt)("p",null,"When your team is using Harbor for private image registries and Tekton is enabled, you can build images from source using pre-configured Tekton pipelines and buildpacks from ",(0,a.kt)("a",{parentName:"p",href:"https://buildpacks.io/docs/buildpack-author-guide/package-a-buildpack/"},"paketo")," to build images from application source."),(0,a.kt)("p",null,"In this lab, you are going to create a build, using the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/spring-projects/spring-petclinic"},"Spring Pet Clinic sample app")," and buildpacks. When using the buildpacks option, Otomi uses buildpacks to build an image based on application source code without using a Dockerfile."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In the right menu, click on ",(0,a.kt)("inlineCode",{parentName:"li"},"Build")),(0,a.kt)("li",{parentName:"ol"},"Click on ",(0,a.kt)("inlineCode",{parentName:"li"},"Create Build")),(0,a.kt)("li",{parentName:"ol"},"Fill in the name ",(0,a.kt)("inlineCode",{parentName:"li"},"petclinic")," for your build and a tag (default is tag is latest)"),(0,a.kt)("li",{parentName:"ol"},"Choose ",(0,a.kt)("inlineCode",{parentName:"li"},"Buildpacks")),(0,a.kt)("li",{parentName:"ol"},"In the ",(0,a.kt)("inlineCode",{parentName:"li"},"Application source")," section, fill in the following:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RepoURL: ",(0,a.kt)("inlineCode",{parentName:"li"},"https://github.com/spring-projects/spring-petclinic")),(0,a.kt)("li",{parentName:"ul"},"revision: ",(0,a.kt)("inlineCode",{parentName:"li"},"82cb521d636b282340378d80a6307a08e3d4a4c4"))),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,a.kt)("p",null,"To see the status of the build, open a Shell (in the right menu in the Console) and run ",(0,a.kt)("inlineCode",{parentName:"p"},"k9s"),". You will now see all the pods in your team's namespace. 2 new pods will start and run the build pipeline tasks."),(0,a.kt)("p",null,"When the build is ready (the 2 build pods have the status ",(0,a.kt)("inlineCode",{parentName:"p"},"completed"),"), you will see the image in Harbor:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Open Harbor"),(0,a.kt)("li",{parentName:"ol"},"Click on the project of your team. Here you will see all the registries of the team, including the registry of the new build image")),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"harbor-projects",src:n(4841).Z,width:"3060",height:"1022"})),(0,a.kt)("p",null,"When using the Build feature in Otomi, a Tekton Pipeline is created and the pipline is executed only once using a Tekton Pipelinerun. To run the build again using Otomi Console, follow these steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Change the tag of the build to ",(0,a.kt)("inlineCode",{parentName:"li"},"1.0.0")),(0,a.kt)("li",{parentName:"ol"},"Submit changes")),(0,a.kt)("p",null,"To re-build the image using the same tag, restart the build pipeline using the Tekton cli in the Shell:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Start a shell in Otomi Console")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Get the name of the pipeline"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pipelines\nNAME                         AGE\nbuildpacks-build-petclinic   5m10s\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Get the name of the pipelinerun:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pipelineruns\nNAME                                SUCCEEDED   REASON   STARTTIME   COMPLETIONTIME\nbuildpacks-build-petclinic-latest   False       Failed   5m18s       4m27s\n")),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Start the pipeline using the pipelinerun:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tkn pipeline start buildpacks-build-petclinic --use-pipelinerun buildpacks-build-petclinic-latest\nPipelineRun started: buildpacks-build-petclinic-latest-j5mmt\n")),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"In order to track the PipelineRun progress run:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tkn pipelinerun logs buildpacks-build-petclinic-latest-j5mmt -f\n")))}c.isMDXComponent=!0},4841:(e,t,n)=>{n.d(t,{Z:()=>i});const i=n.p+"assets/images/see-build-harbor-2f494c446cd55265ff5758d1690d7fc3.png"}}]);