(self.webpackChunkotomi_docs=self.webpackChunkotomi_docs||[]).push([[2928],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,b=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return n?o.createElement(b,i(i({ref:t},u),{},{components:n})):o.createElement(b,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5702:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var o=n(2122),r=n(9756),a=(n(7294),n(3905)),i=["components"],l={slug:"ce/jobs",title:"Configuring Jobs in CE mode",sidebar_label:"Jobs"},s={unversionedId:"ce-configure-jobs",id:"ce-configure-jobs",isDocsHomePage:!1,title:"Configuring Jobs in CE mode",description:"When you are running Otomi in CE mode, you will operate on the values directly and have to commit them manually. This page describes how to create a Job when running in CE mode. Before you can create a Job, make sure a Team is created first.",source:"@site/docs/ce-configure-jobs.md",sourceDirName:".",slug:"/ce/jobs",permalink:"/docs/ce/jobs",editUrl:"https://github.com/redkubes/redkubes/tree/master/docs/ce-configure-jobs.md",version:"current",sidebar_label:"Jobs",frontMatter:{slug:"ce/jobs",title:"Configuring Jobs in CE mode",sidebar_label:"Jobs"},sidebar:"mainSidebar",previous:{title:"Configuring Services in CE mode",permalink:"/docs/ce/services"},next:{title:"Configuring Secrets in CE mode",permalink:"/docs/ce/secrets"}},c=[{value:"Create a Job",id:"create-a-job",children:[]},{value:"Validate changes (optional)",id:"validate-changes-optional",children:[]},{value:"Deploy changes",id:"deploy-changes",children:[]}],u={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When you are running Otomi in CE mode, you will operate on the values directly and have to commit them manually. This page describes how to create a Job when running in CE mode. Before you can create a Job, make sure a ",(0,a.kt)("a",{parentName:"p",href:"/docs/ce/teams"},"Team")," is created first."),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"/about/architecture#jobs"},"Job")," in Otomi is a feature for easy deployment of Jobs."),(0,a.kt)("p",null,"3 types of Jobs are supported:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ol",{parentName:"li"},(0,a.kt)("li",{parentName:"ol"},"Kubernetes ",(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/workloads/controllers/job/"},"Jobs")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ol",{parentName:"li",start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/"},"CronJobs"),".")))),(0,a.kt)("h2",{id:"create-a-job"},"Create a Job"),(0,a.kt)("p",null,"To create a Job open the ",(0,a.kt)("inlineCode",{parentName:"p"},"jobs.<team-name>.yaml")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"/env/teams/"),"."),(0,a.kt)("p",null,"The next code example creates a Job in the team demo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'teamConfig:\n  teams:\n    otomi:\n      jobs:\n        - name: hello-world # the name of the job\n          type: Job\n          enabled: true # select to enable the job. If not enabled, the Job will nopt be executed.\n          runPolicy: OnSpecChange # the job controller will only be re-deployed if one changes this specification\n          script: |\n            #!/usr/bin/perl\n            use strict;\n            use warnings;\n            print "Hello World";\n          ttlSecondsAfterFinished: 86400 # Time To Live after job is finished in seconds. Will be removed afterwards.\n          image: # the image used to execute the script of the job\n            repository: perl\n            tag: latest\n          resources:\n            limits:\n              cpu: 50m\n              memory: 64Mi\n            requests:\n              cpu: 50m\n              memory: 64Mi\n')),(0,a.kt)("h1",{id:"create-a-cronjob"},"Create a CronJob"),(0,a.kt)("p",null,"To create a CronJob open the ",(0,a.kt)("inlineCode",{parentName:"p"},"jobs.<team-name>.yaml")," file in ",(0,a.kt)("inlineCode",{parentName:"p"},"/env/teams/"),"."),(0,a.kt)("p",null,"The next code example creates a CronJob in the team demo:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"teamConfig:\n  teams:\n    otomi:\n      jobs:\n        - name: hi-world # the name of the job\n          type: CronJob\n          enabled: true # select to enable the job. If not enabled, the Job will nopt be executed.\n          runPolicy: OnSpecChange # the job controller will only be re-deployed if one changes this specification\n          schedule: 0 1 * * *\n          script: |\n            #!/bin/sh\n            echo Hi World\n          ttlSecondsAfterFinished: 86400 # Time To Live after job is finished in seconds. Will be removed afterwards.\n          image: # the image used to execute the script of the job\n            repository: busybox\n            tag: 1.28\n          resources:\n            limits:\n              cpu: 50m\n              memory: 64Mi\n            requests:\n              cpu: 50m\n              memory: 64Mi\n")),(0,a.kt)("h2",{id:"validate-changes-optional"},"Validate changes (optional)"),(0,a.kt)("p",null,"Use Otomi CLI to validate the changes in the values based on the Otomi values schema:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"otomi validate-values -v\n")),(0,a.kt)("p",null,"When successful, the output will show: ",(0,a.kt)("inlineCode",{parentName:"p"},"otomi:validate-values:verbose Values validation SUCCESSFUL")),(0,a.kt)("h2",{id:"deploy-changes"},"Deploy changes"),(0,a.kt)("p",null,"Apply the changes:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"otomi apply\n")))}p.isMDXComponent=!0}}]);