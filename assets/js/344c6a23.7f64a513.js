"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[2358],{3905:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>m});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function l(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function r(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?l(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):l(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)i=l[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var d=n.createContext({}),p=function(e){var t=n.useContext(d),i=t;return e&&(i="function"==typeof e?e(t):r(r({},t),e)),i},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(i),m=a,h=c["".concat(d,".").concat(m)]||c[m]||u[m]||l;return i?n.createElement(h,r(r({ref:t},s),{},{components:i})):n.createElement(h,r({ref:t},s))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=i.length,r=new Array(l);r[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var p=2;p<l;p++)r[p]=i[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,i)}c.displayName="MDXCreateElement"},5727:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var n=i(7462),a=(i(7294),i(3905));const l={slug:"lab-26",title:"Trigger builds",sidebar_label:"Trigger builds"},r=void 0,o={unversionedId:"for-devs/get-started/lab-26",id:"for-devs/get-started/lab-26",title:"Trigger builds",description:"In the previous lab we created a build in Otomi using a public code repository. In this lab we'll create a build based on a private code repo in the local Gitea and trigger the build based on a webhook.",source:"@site/docs/for-devs/get-started/lab-26.md",sourceDirName:"for-devs/get-started",slug:"/for-devs/get-started/lab-26",permalink:"/docs/for-devs/get-started/lab-26",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/get-started/lab-26.md",tags:[],version:"current",frontMatter:{slug:"lab-26",title:"Trigger builds",sidebar_label:"Trigger builds"},sidebar:"mainSidebar",previous:{title:"Build images with Otomi",permalink:"/docs/for-devs/get-started/lab-6"},next:{title:"Scan images",permalink:"/docs/for-devs/get-started/lab-7"}},d={},p=[{value:"Create private repo in Gitea",id:"create-private-repo-in-gitea",level:2},{value:"Create a build in Otomi with Trigger enabled",id:"create-a-build-in-otomi-with-trigger-enabled",level:2},{value:"Create a Webhook",id:"create-a-webhook",level:2},{value:"Trigger the build",id:"trigger-the-build",level:2},{value:"Check the status of the build",id:"check-the-status-of-the-build",level:2}],s={toc:p};function u(e){let{components:t,...i}=e;return(0,a.kt)("wrapper",(0,n.Z)({},s,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In the previous lab we created a build in Otomi using a public code repository. In this lab we'll create a build based on a private code repo in the local Gitea and trigger the build based on a webhook."),(0,a.kt)("h2",{id:"create-private-repo-in-gitea"},"Create private repo in Gitea"),(0,a.kt)("p",null,"First create a private repo in Gitea and mirror a sample repo:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create a private repo ",(0,a.kt)("inlineCode",{parentName:"li"},"hello")," in the ",(0,a.kt)("inlineCode",{parentName:"li"},"otomi")," organization in Gitea as described in the ",(0,a.kt)("a",{parentName:"li",href:"/docs/for-devs/get-started/lab-3"},"Create a private Git repo")," lab."),(0,a.kt)("li",{parentName:"ul"},"Clone the sample repo:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/redkubes/nodejs-helloworld.git\ncd nodejs-helloworld\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Mirror the sample repo to the new Gitea repo:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"git push --mirror https://gitea.<your-domain>/otomi/hello.git\n")),(0,a.kt)("h2",{id:"create-a-build-in-otomi-with-trigger-enabled"},"Create a build in Otomi with Trigger enabled"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In the right menu, click on ",(0,a.kt)("inlineCode",{parentName:"li"},"Build")),(0,a.kt)("li",{parentName:"ol"},"Click on ",(0,a.kt)("inlineCode",{parentName:"li"},"Create Build")),(0,a.kt)("li",{parentName:"ol"},"Fill in the name ",(0,a.kt)("inlineCode",{parentName:"li"},"hello")," for your build and a tag (default is tag is latest)"),(0,a.kt)("li",{parentName:"ol"},"Choose ",(0,a.kt)("inlineCode",{parentName:"li"},"./Dockerfile")),(0,a.kt)("li",{parentName:"ol"},"In the ",(0,a.kt)("inlineCode",{parentName:"li"},"Application source")," section, fill in the following:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"RepoURL: ",(0,a.kt)("inlineCode",{parentName:"li"},"https://gitea.<your-domain>/otomi/hello.git")),(0,a.kt)("li",{parentName:"ul"},"revision: ",(0,a.kt)("inlineCode",{parentName:"li"},"main"))),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Enable ",(0,a.kt)("inlineCode",{parentName:"li"},"Trigger")),(0,a.kt)("li",{parentName:"ol"},"Copy the link in the description ",(0,a.kt)("inlineCode",{parentName:"li"},"(http://el-gitea-webhook-<build-name>.team-<team-name>.svc.cluster.local:8080)")),(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,a.kt)("h2",{id:"create-a-webhook"},"Create a Webhook"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In Otomi Console, click on ",(0,a.kt)("inlineCode",{parentName:"li"},"apps")," the left menu and then open ",(0,a.kt)("inlineCode",{parentName:"li"},"Gitea")),(0,a.kt)("li",{parentName:"ol"},"In the top menu of Gitea, click on ",(0,a.kt)("inlineCode",{parentName:"li"},"Explore")," and then on the ",(0,a.kt)("inlineCode",{parentName:"li"},"otomi/hello")," repo"),(0,a.kt)("li",{parentName:"ol"},"Go to ",(0,a.kt)("inlineCode",{parentName:"li"},"Settings")," (top right) and then to ",(0,a.kt)("inlineCode",{parentName:"li"},"Webhooks")),(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("inlineCode",{parentName:"li"},"Add Webhook")," and select ",(0,a.kt)("inlineCode",{parentName:"li"},"Gitea")),(0,a.kt)("li",{parentName:"ol"},"In the ",(0,a.kt)("inlineCode",{parentName:"li"},"Target URL"),", add the link we copied when we created a build in Otomi and adjust the URL based on your team-name. Example: the team name is ",(0,a.kt)("inlineCode",{parentName:"li"},"demo"),", so the URL should be: ",(0,a.kt)("inlineCode",{parentName:"li"},"http://el-gitea-webhook-hello.team-demo.svc.cluster.local:8080")),(0,a.kt)("li",{parentName:"ol"},"Click ",(0,a.kt)("inlineCode",{parentName:"li"},"Add Webhook"))),(0,a.kt)("h2",{id:"trigger-the-build"},"Trigger the build"),(0,a.kt)("p",null,"You can now trigger the build by doing a commit in the ",(0,a.kt)("inlineCode",{parentName:"p"},"hello")," repo, or by testing the webhook. Let's test the webhook"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In Gitea, go to the ",(0,a.kt)("inlineCode",{parentName:"li"},"Settings")," (top right) of the ",(0,a.kt)("inlineCode",{parentName:"li"},"hello")," repo and then to ",(0,a.kt)("inlineCode",{parentName:"li"},"Webhooks")),(0,a.kt)("li",{parentName:"ol"},"Click on the webhook we just created"),(0,a.kt)("li",{parentName:"ol"},"In the bottom, click on ",(0,a.kt)("inlineCode",{parentName:"li"},"Test Delivery"))),(0,a.kt)("h2",{id:"check-the-status-of-the-build"},"Check the status of the build"),(0,a.kt)("p",null,"The build should now have started. For this, Otomi created a pipeline in Tekton. Based on the webhook, Tekton has now created a ",(0,a.kt)("inlineCode",{parentName:"p"},"PipelineRun"),". Let's check the status of the PipelineRun:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"In Otomi Console, click on ",(0,a.kt)("inlineCode",{parentName:"li"},"Builds")),(0,a.kt)("li",{parentName:"ol"},"In the list of Builds, click on the ",(0,a.kt)("inlineCode",{parentName:"li"},"PipelineRun")," link of the ",(0,a.kt)("inlineCode",{parentName:"li"},"hello")," build"),(0,a.kt)("li",{parentName:"ol"},"Tekton Dashboard will open and show a list of all the PipelineRuns"),(0,a.kt)("li",{parentName:"ol"},"Click on the PipelineRun with the name ",(0,a.kt)("inlineCode",{parentName:"li"},"docker-trigger-build-hello-*")),(0,a.kt)("li",{parentName:"ol"},"You can now see the status of the build.")))}u.isMDXComponent=!0}}]);