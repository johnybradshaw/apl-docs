"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[1673],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,v=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2848:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={slug:"tutorials/create-k8s-service",title:"Create a Kubernetes service",sidebar_label:"Create a K8s service"},c=void 0,s={unversionedId:"tutorial-4-create-svc",id:"tutorial-4-create-svc",title:"Create a Kubernetes service",description:"In this tutorial, we are going to deploy the image we pushed to harbor in the previous tutorial, by creating a Kubernetes Deployment and Service.",source:"@site/docs/tutorial-4-create-svc.md",sourceDirName:".",slug:"/tutorials/create-k8s-service",permalink:"/docs/tutorials/create-k8s-service",editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/tutorial-4-create-svc.md",tags:[],version:"current",frontMatter:{slug:"tutorials/create-k8s-service",title:"Create a Kubernetes service",sidebar_label:"Create a K8s service"},sidebar:"mainSidebar",previous:{title:"Push an image to harbor",permalink:"/docs/tutorials/build-tag-push"},next:{title:"Create a Knative service",permalink:"/docs/tutorials/create-knative-service"}},p={},u=[{value:"Create a Deployment and Service",id:"create-a-deployment-and-service",level:3},{value:"Deploy the deployment and service",id:"deploy-the-deployment-and-service",level:3}],m={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In this tutorial, we are going to deploy the image we pushed to harbor in the previous tutorial, by creating a Kubernetes Deployment and Service."),(0,o.kt)("h3",{id:"create-a-deployment-and-service"},"Create a Deployment and Service"),(0,o.kt)("p",null,"Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"hello-svc.yaml")," file and copy/paste the following 2 Kubernetes manifests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: hello-svc\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: hello-svc\n  template:\n    metadata:\n      annotations:\n        policy.otomi.io/ignore-sidecar: container-limits,psp-allowed-users\n      labels:\n        app: hello-svc\n    spec:\n      containers:\n        - name: hello-svc\n          image: harbor.<your-ip>.nip.io/team-demo/hello-world:latest\n          resources:\n            limits:\n              memory: '128Mi'\n              cpu: '200m'\n            requests:\n              memory: '64Mi'\n              cpu: '100m'\n          securityContext:\n            runAsUser: 1001\n          ports:\n            - containerPort: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: hello-svc\nspec:\n  selector:\n    app: hello-svc\n  ports:\n    - port: 80\n      targetPort: 8080\n")),(0,o.kt)("h3",{id:"deploy-the-deployment-and-service"},"Deploy the deployment and service"),(0,o.kt)("p",null,"In Otomi console, select team ",(0,o.kt)("inlineCode",{parentName:"p"},"demo")," in the top bar. On the bottom of the left panel, click on ",(0,o.kt)("inlineCode",{parentName:"p"},"download KUBECFG"),"."),(0,o.kt)("p",null,"Now export the KUBECFG to set the kubectl context:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export KUBECONFIG=$path-to-your-kubeconfig.yaml\n")),(0,o.kt)("p",null,"And apply the manifest to Kubernetes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f hello-svc.yaml\n")),(0,o.kt)("p",null,"Check to see if the pod is running and the service has been created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get pod\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl describe svc hello\n")))}d.isMDXComponent=!0}}]);