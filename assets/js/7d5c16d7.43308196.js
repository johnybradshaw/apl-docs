"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[2248],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,g=p["".concat(s,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(g,l(l({ref:t},u),{},{components:n})):a.createElement(g,l({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<r;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},979:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={slug:"gcp",title:"Google Cloud Platform",sidebar_label:"Google Cloud Platform"},l="Install Otomi on GKE with a GCP DNS zone",i={unversionedId:"get-started/installation/gcp",id:"get-started/installation/gcp",title:"Google Cloud Platform",description:"Prerequisites",source:"@site/docs/get-started/installation/gcp.md",sourceDirName:"get-started/installation",slug:"/get-started/installation/gcp",permalink:"/docs/get-started/installation/gcp",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/get-started/installation/gcp.md",tags:[],version:"current",frontMatter:{slug:"gcp",title:"Google Cloud Platform",sidebar_label:"Google Cloud Platform"},sidebar:"mainSidebar",previous:{title:"Digital Ocean",permalink:"/docs/get-started/installation/digitalocean"},next:{title:"Linode",permalink:"/docs/get-started/installation/linode"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create a GKE cluster",id:"create-a-gke-cluster",level:2},{value:"Configure DNS",id:"configure-dns",level:2},{value:"Create Cloud DNS Zone",id:"create-cloud-dns-zone",level:3},{value:"Static Credentials",id:"static-credentials",level:3},{value:"Create GSA for use with static credentials",id:"create-gsa-for-use-with-static-credentials",level:4},{value:"Create credentials",id:"create-credentials",level:4},{value:"Create the values.yaml file",id:"create-the-valuesyaml-file",level:2},{value:"Install Otomi using helm",id:"install-otomi-using-helm",level:2}],u={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"install-otomi-on-gke-with-a-gcp-dns-zone"},"Install Otomi on GKE with a GCP DNS zone"),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://cloud.google.com/sdk/docs/install"},"GCloud SDK"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: If you login via ",(0,o.kt)("a",{parentName:"p",href:"https://cloud.google.com/shell"},"Google Cloud Shell"),", you don't need to install the prerequisites")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"GCloud CLI Cheat Sheet")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Initialize and authentication\ngcloud init\ngcloud auth login\ngcloud config set project PROJECT_ID\n\n# Enable google services api\ngcloud services enable compute.googleapis.com\ngcloud services enable container.googleapis.com\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"create-a-gke-cluster"},"Create a GKE cluster"),(0,o.kt)("p",null,"Set up environment variables:"),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Change the Machine Type to match a type supported in your region.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# Set Cluster name\nCLUSTER_NAME=otomi\n# Set region\nCOMPUTE_REGION=europe-west4\n# Set machine type\nMACHINE_TYPE=e2-standard-8\n")),(0,o.kt)("p",null,"Create the cluster:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters create $CLUSTER_NAME \\\n    --enable-autoscaling \\\n    --enable-network-policy \\\n    --num-nodes 1 \\\n    --min-nodes 1 \\\n    --max-nodes 2 \\\n    --machine-type $MACHINE_TYPE \\\n    --logging NONE \\\n    --monitoring NONE \\\n    --region $COMPUTE_REGION\n")),(0,o.kt)("p",null,"Update the Kubernetes config file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"gcloud container clusters get-credentials $CLUSTER_NAME --region $COMPUTE_REGION\n")),(0,o.kt)("h2",{id:"configure-dns"},"Configure DNS"),(0,o.kt)("h3",{id:"create-cloud-dns-zone"},"Create Cloud DNS Zone"),(0,o.kt)("p",null,"Create a DNS zone which will contain the managed DNS records. If using your own domain that was registered with a third-party domain registrar, you should point your domain's name servers to the values under the ",(0,o.kt)("inlineCode",{parentName:"p"},"nameServers")," key. Please consult your registrar's documentation on how to do that.  This tutorial will use example domain of  ",(0,o.kt)("inlineCode",{parentName:"p"},"example.com"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'gcloud dns managed-zones create "example-com" --dns-name "example.com." \\\n  --description "Automatically managed zone by kubernetes.io/external-dns"\n')),(0,o.kt)("p",null,"Make a note of the nameservers that were assigned to your new zone."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'gcloud dns record-sets list \\\n    --zone "example-com" --name "example.com." --type NS\n')),(0,o.kt)("h3",{id:"static-credentials"},"Static Credentials"),(0,o.kt)("p",null,"In this scenario, a new GSA (Google Service Account) is created that has access to the CloudDNS zone.  The credentials for this GSA are saved and installed as a Kubernetes secret that will be used by ExternalDNS.  "),(0,o.kt)("p",null,"This allows only containers that have access to the secret, such as ExternalDNS to update records on the Cloud DNS Zone."),(0,o.kt)("h4",{id:"create-gsa-for-use-with-static-credentials"},"Create GSA for use with static credentials"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'DNS_SA_NAME="external-dns-sa"\nDNS_SA_EMAIL="$DNS_SA_NAME@${GKE_PROJECT_ID}.iam.gserviceaccount.com"\n\n# create GSA used to access the Cloud DNS zone\ngcloud iam service-accounts create $DNS_SA_NAME --display-name $DNS_SA_NAME\n\n# assign google service account to dns.admin role in cloud-dns project\ngcloud projects add-iam-policy-binding $DNS_PROJECT_ID \\\n  --member serviceAccount:$DNS_SA_EMAIL --role "roles/dns.admin"\n')),(0,o.kt)("h4",{id:"create-credentials"},"Create credentials"),(0,o.kt)("p",null,"Generate static credentials from the ExternalDNS GSA."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"# download static credentials\ngcloud iam service-accounts keys create /local/path/to/credentials.json \\\n  --iam-account $DNS_SA_EMAIL\n")),(0,o.kt)("p",null,"Get the contents of the ",(0,o.kt)("inlineCode",{parentName:"p"},"credentials.son"),". Note that you don't need to create a Kubernetes secret. The credentials will be directly provided to the Otomi installer and Otomi will create the secret."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"cat /local/path/to/credentials.json\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "type": "service_account",\n    "project_id": "xxx",\n    "private_key_id": "xxx",\n    "private_key": xxx,\n    "client_email": "external-dns-sa@otomi.iam.gserviceaccount.com",\n    "client_id": "000000000000",\n    "auth_uri": "https://accounts.google.com/o/oauth2/auth",\n    "token_uri": "https://oauth2.googleapis.com/token",\n    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",\n    "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/xxxx.iam.gserviceaccount.com"\n}\n\n')),(0,o.kt)("h2",{id:"create-the-valuesyaml-file"},"Create the values.yaml file"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'tee values.yaml<<EOF\ncluster:\n  name: otomi\n  provider: google\n  domainSuffix: gcp.example.com\notomi:\n  hasExternalDNS: true\ndns:\n  domainFilters: \n    - example.com\n  provider:\n    google:\n      serviceAccountKey: |\n        {\n            "type": "service_account",\n            "project_id": "xxx",\n            "private_key_id": "xxx",\n            "private_key": xxx,\n            "client_email": "external-dns-sa@otomi.iam.gserviceaccount.com",\n            "client_id": "000000000000",\n            "auth_uri": "https://accounts.google.com/o/oauth2/auth",\n            "token_uri": "https://oauth2.googleapis.com/token",\n            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",\n            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/xxxx.iam.gserviceaccount.com"\n        }\n      project: $DNS_PROJECT_ID\napps:\n  cert-manager:\n    issuer: letsencrypt\n    stage: production\n    email: admin@example.com\nEOF\n')),(0,o.kt)("p",null,"And adjust the ",(0,o.kt)("inlineCode",{parentName:"p"},"domainSuffix"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"domainFilters")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"email"),"."),(0,o.kt)("h2",{id:"install-otomi-using-helm"},"Install Otomi using helm"),(0,o.kt)("p",null,"Install Otomi using Helm:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add otomi https://otomi.io/otomi-core\nhelm repo update\nhelm install -f values.yaml otomi otomi/otomi\n")),(0,o.kt)("p",null,"Monitor the logs of the installer job:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs jobs/otomi -n default -f\n")),(0,o.kt)("p",null,"When the installer is finished, copy the ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"admin-password")," from the console output."),(0,o.kt)("p",null,"Follow the activation steps ",(0,o.kt)("a",{parentName:"p",href:"https://otomi.io/docs/get-started/activation"},"here.")),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Like to learn how to use Otomi? Go through the ",(0,o.kt)("a",{parentName:"p",href:"/docs/for-devs/get-started/overview"},"Get Started labs"))))}d.isMDXComponent=!0}}]);