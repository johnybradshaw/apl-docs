"use strict";(self.webpackChunkredkubes_github_io=self.webpackChunkredkubes_github_io||[]).push([[7973],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var r=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,o=function(e,t){if(null==e)return{};var a,r,o={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=r.createContext({}),p=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,o=e.mdxType,n=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=p(a),c=o,k=u["".concat(s,".").concat(c)]||u[c]||m[c]||n;return a?r.createElement(k,l(l({ref:t},d),{},{components:a})):r.createElement(k,l({ref:t},d))}));function c(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var n=a.length,l=new Array(n);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var p=2;p<n;p++)l[p]=a[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},4316:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>n,metadata:()=>i,toc:()=>p});var r=a(7462),o=(a(7294),a(3905));const n={slug:"workloads",title:"Team Workloads",sidebar_label:"Workloads"},l=void 0,i={unversionedId:"for-devs/console/workloads",id:"for-devs/console/workloads",title:"Team Workloads",description:"A Workload in Otomi is a self-service feature for creating Kubernetes resources using Helm charts form the Otomi Developer Catalog.",source:"@site/docs/for-devs/console/workloads.md",sourceDirName:"for-devs/console",slug:"/for-devs/console/workloads",permalink:"/docs/for-devs/console/workloads",draft:!1,editUrl:"https://github.com/redkubes/redkubes.github.io/tree/main/docs/for-devs/console/workloads.md",tags:[],version:"current",frontMatter:{slug:"workloads",title:"Team Workloads",sidebar_label:"Workloads"},sidebar:"mainSidebar",previous:{title:"Builds",permalink:"/docs/for-devs/console/builds"},next:{title:"Services",permalink:"/docs/for-devs/console/services"}},s={},p=[{value:"Workloads (all)",id:"workloads-all",level:2},{value:"Create a Workload",id:"create-a-workload",level:2}],d={toc:p};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A Workload in Otomi is a self-service feature for creating Kubernetes resources using Helm charts form the Otomi Developer Catalog."),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Ask your platform administrator to activate Argo CD to be able to use this feature.")),(0,o.kt)("h2",{id:"workloads-all"},"Workloads (all)"),(0,o.kt)("p",null,"All known Workloads of the team are listed here."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Property"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Name"),(0,o.kt)("td",{parentName:"tr",align:null},"The name of the workload")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Argocd"),(0,o.kt)("td",{parentName:"tr",align:null},"Link to the Argo CD application in the Argo CD UI")))),(0,o.kt)("h2",{id:"create-a-workload"},"Create a Workload"),(0,o.kt)("p",null,"Before creating a workload from the developer catalog, we'll need the ",(0,o.kt)("inlineCode",{parentName:"p"},"repository")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tag")," of the image you would like to use."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to the list of Builds and add the ",(0,o.kt)("inlineCode",{parentName:"p"},"repository")," of the build to use to your clipboard. Remember the tag.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go to ",(0,o.kt)("inlineCode",{parentName:"p"},"Workloads")," in the left menu and click on ",(0,o.kt)("inlineCode",{parentName:"p"},"New Workload"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a ",(0,o.kt)("inlineCode",{parentName:"p"},"Name")," for the workload")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Select a template from the catalog to use")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"(Optional) Configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"Auto image updater"),". Default is ",(0,o.kt)("inlineCode",{parentName:"p"},"Disabled"),"."))),(0,o.kt)("p",null,"The Auto Image Updater will (based on the update strategy) automatically update the container images of a workload."),(0,o.kt)("p",null,"Select the update strategy. Choose between:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Digest: Inspects a single tag in the registry for changes, and updates the image on any change to the previous state. Requires to provide a ",(0,o.kt)("inlineCode",{parentName:"li"},"repository")," and a ",(0,o.kt)("inlineCode",{parentName:"li"},"tag"),"."),(0,o.kt)("li",{parentName:"ul"},"Semver: Update based on semantic versions. Example: ",(0,o.kt)("inlineCode",{parentName:"li"},"v1.0")," would allow the image to be updated to any patch version within the 1.0 minor release.")),(0,o.kt)("p",null,"There are 2 other properties available: ",(0,o.kt)("inlineCode",{parentName:"p"},"imageParameter")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"tagParameter"),". Change the parameters in case your Helm application contains more than one image in the manifests or uses another parameters to define which image to render in the manifests."),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"In the workload ",(0,o.kt)("inlineCode",{parentName:"li"},"values"),", change the following parameters:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"image:\n  repository: <paste from clipboard>\n  tag: latest\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Click ",(0,o.kt)("inlineCode",{parentName:"li"},"Submit"))),(0,o.kt)("p",null,"Now click on ",(0,o.kt)("inlineCode",{parentName:"p"},"Deploy Changes")),(0,o.kt)("p",null,"After a few minutes, Otomi will have created all the needed Argo CD resources to deploy your workload. In the workloads list, click on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Application")," link of your workload to see the status of your workload."),(0,o.kt)("p",null,"The values of a workload can be changed at any time. Changes will automatically be deployed."))}m.isMDXComponent=!0}}]);