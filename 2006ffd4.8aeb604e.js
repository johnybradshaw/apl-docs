(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{185:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=b(a),d=n,O=p["".concat(l,".").concat(d)]||p[d]||u[d]||o;return a?r.a.createElement(O,c(c({ref:t},s),{},{components:a})):r.a.createElement(O,c({ref:t},s))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var s=2;s<o;s++)l[s]=a[s];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},254:function(e,t,a){"use strict";a.r(t),t.default=a.p+"assets/images/policies-7e56735693bd25d0e5709b5dc38ff7c8.png"},88:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return i})),a.d(t,"default",(function(){return b}));var n=a(3),r=a(7),o=(a(0),a(185)),l={slug:"console/policies",title:"Policies"},c={unversionedId:"ui-policies",id:"ui-policies",isDocsHomePage:!1,title:"Policies",description:"Policies",source:"@site/docs/ui-policies.md",slug:"/console/policies",permalink:"/docs/console/policies",editUrl:"https://github.com/redkubes/redkubes.github.io/tree/master/docs/ui-policies.md",version:"current",sidebar:"mainSidebar",previous:{title:"Clusters",permalink:"/docs/console/clusters"},next:{title:"Teams",permalink:"/docs/console/teams"}},i=[],s={toc:i};function b(e){var t=e.components,l=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},s,l,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,Object(o.b)("img",{alt:"Policies",src:a(254).default})),Object(o.b)("p",null,"This section allows to turn Open Policy Agent (OPA) policies on or off, and also set default parameters to be used by the policies."),Object(o.b)("table",null,Object(o.b)("thead",{parentName:"table"},Object(o.b)("tr",{parentName:"thead"},Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Setting"),Object(o.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(o.b)("tbody",{parentName:"table"},Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"banned-image-tags"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Add any image tags for containers that are not allowed in your cluster.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"container-limits"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Set global compute limits for your containers.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-allowed-repos"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Add globally allowed repositories for version control.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-host-filesystem"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Set policies for the host filesystem of all Kubernetes cluster nodes.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-allowed-users"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Default user (UID) settings to force containers to run with. It is recommended to at least set 'runAsUser' to 'MustRunAsNonRoot' to disallow root.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-host-security"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether a pod is allowed to access the host PID namespace/host IPC, or if a pod defines host aliases.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-host-networking-ports"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether a pod can access ports on the host.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-privileged"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether privileged containers can escalate to root privileges on the node.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-capabilities"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Whether to allow containers with sufficient capabilities granted to obtain escalated access.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-forbidden-sysctls"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Determine what system controls are allowed or not.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-apparmor"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Prevents an application from accessing files it should not access.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-seccomp"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Reduces the chance that a kernel vulnerability will be successfully exploited.")),Object(o.b)("tr",{parentName:"tbody"},Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"psp-selinux"),Object(o.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Security-enhanced Linux.")))),Object(o.b)("p",null,"Please see the ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/open-policy-agent/gatekeeper-library"}),"OPA Gatekeeper policy library")," as it is the source for the policies here. We made a selection of usable policies for Otomi and adapted them to be used by Conftest as well for static analysis of manifests generated by Otomi."))}b.isMDXComponent=!0}}]);