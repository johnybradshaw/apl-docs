(window.webpackJsonp=window.webpackJsonp||[]).push([[83],{154:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var o=n(3),r=n(7),a=(n(0),n(167)),i={slug:"ce/jobs",title:"Configuring Jobs in CE mode",sidebar_label:"Jobs"},c={unversionedId:"ce-configure-jobs",id:"ce-configure-jobs",isDocsHomePage:!1,title:"Configuring Jobs in CE mode",description:"When you are running Otomi in CE mode, you will operate on the values directly and have to commit them manually. This page describes how to create a Job when running in CE mode. Before you can create a Job, make sure a Team is created first.",source:"@site/docs/ce-configure-jobs.md",slug:"/ce/jobs",permalink:"/docs/ce/jobs",editUrl:"https://github.com/redkubes/redkubes/tree/master/docs/ce-configure-jobs.md",version:"current",sidebar_label:"Jobs",sidebar:"mainSidebar",previous:{title:"Configuring Services in CE mode",permalink:"/docs/ce/services"},next:{title:"Configuring Secrets in CE mode",permalink:"/docs/ce/secrets"}},l=[{value:"Create a Job",id:"create-a-job",children:[]},{value:"Validate changes (optional)",id:"validate-changes-optional",children:[]},{value:"Deploy changes",id:"deploy-changes",children:[]}],s={toc:l};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"When you are running Otomi in CE mode, you will operate on the values directly and have to commit them manually. This page describes how to create a Job when running in CE mode. Before you can create a Job, make sure a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/docs/ce/teams"}),"Team")," is created first."),Object(a.b)("p",null,"A ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"/about/architecture#jobs"}),"Job")," in Otomi is a feature for easy deployment of Kubernetes Jobs."),Object(a.b)("p",null,"2 types of Jobs are supported:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://kubernetes.io/docs/concepts/workloads/controllers/job/"}),"Jobs")),Object(a.b)("li",{parentName:"ul"},Object(a.b)("a",Object(o.a)({parentName:"li"},{href:"https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/"}),"CronJobs"),".")),Object(a.b)("h2",{id:"create-a-job"},"Create a Job"),Object(a.b)("p",null,"To create a Job open the ",Object(a.b)("inlineCode",{parentName:"p"},"jobs.<team-name>.yaml")," file in ",Object(a.b)("inlineCode",{parentName:"p"},"/env/teams/"),"."),Object(a.b)("p",null,"The next code example creates a Job in the team demo:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),'teamConfig:\n  teams:\n    otomi:\n      jobs:\n        - name: hello-world # the name of the job\n          type: Job\n          enabled: true # select to enable the job. If not enabled, the Job will nopt be executed.\n          runPolicy: OnSpecChange # the job controller will only be re-deployed if one changes this specification\n          script: |\n            #!/usr/bin/perl\n            use strict;\n            use warnings;\n            print "Hello World";\n          ttlSecondsAfterFinished: 86400 # Time To Live after job is finished in seconds. Will be removed afterwards.\n          image: # the image used to execute the script of the job\n            repository: perl\n            tag: latest\n          resources:\n            limits:\n              cpu: 50m\n              memory: 64Mi\n            requests:\n              cpu: 50m\n              memory: 64Mi\n')),Object(a.b)("h1",{id:"create-a-cronjob"},"Create a CronJob"),Object(a.b)("p",null,"To create a CronJob open the ",Object(a.b)("inlineCode",{parentName:"p"},"jobs.<team-name>.yaml")," file in ",Object(a.b)("inlineCode",{parentName:"p"},"/env/teams/"),"."),Object(a.b)("p",null,"The next code example creates a CronJob in the team demo:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),"teamConfig:\n  teams:\n    otomi:\n      jobs:\n        - name: hi-world # the name of the job\n          type: CronJob\n          enabled: true # select to enable the job. If not enabled, the Job will nopt be executed.\n          runPolicy: OnSpecChange # the job controller will only be re-deployed if one changes this specification\n          schedule: 0 1 * * *\n          script: |\n            #!/bin/sh\n            echo Hi World\n          ttlSecondsAfterFinished: 86400 # Time To Live after job is finished in seconds. Will be removed afterwards.\n          image: # the image used to execute the script of the job\n            repository: busybox\n            tag: 1.28\n          resources:\n            limits:\n              cpu: 50m\n              memory: 64Mi\n            requests:\n              cpu: 50m\n              memory: 64Mi\n")),Object(a.b)("h2",{id:"validate-changes-optional"},"Validate changes (optional)"),Object(a.b)("p",null,"Use Otomi CLI to validate the changes in the values based on the Otomi values schema:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"otomi validate-values\n")),Object(a.b)("p",null,"When successful, the output will show: ",Object(a.b)("inlineCode",{parentName:"p"},"otomi:validate-values:verbose Values validation SUCCESSFUL")),Object(a.b)("h2",{id:"deploy-changes"},"Deploy changes"),Object(a.b)("p",null,"Apply the changes:"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"otomi apply\n")))}b.isMDXComponent=!0},167:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return d}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=r.a.createContext({}),b=function(e){var t=r.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=b(e.components);return r.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=b(n),m=o,d=u["".concat(i,".").concat(m)]||u[m]||p[m]||a;return n?r.a.createElement(d,c(c({ref:t},s),{},{components:n})):r.a.createElement(d,c({ref:t},s))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);